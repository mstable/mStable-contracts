'npx truffle@5.1.11 compile --all' running (use --truffle-version truffle@x.x.x to use specific version)

Compiling your contracts...
===========================
> Compiling ./contracts/Migrations.sol
> Compiling ./contracts/governance/ClaimableGovernor.sol
> Compiling ./contracts/governance/DelayedClaimableGovernor.sol
> Compiling ./contracts/governance/Governable.sol
> Compiling ./contracts/governance/InitializableGovernableWhitelist.sol
> Compiling ./contracts/interfaces/IBasketManager.sol
> Compiling ./contracts/interfaces/IMasset.sol
> Compiling ./contracts/interfaces/INexus.sol
> Compiling ./contracts/interfaces/IPlatformIntegration.sol
> Compiling ./contracts/interfaces/ISavingsContract.sol
> Compiling ./contracts/interfaces/ISavingsManager.sol
> Compiling ./contracts/masset/BasketManager.sol
> Compiling ./contracts/masset/Masset.sol
> Compiling ./contracts/masset/MassetToken.sol
> Compiling ./contracts/masset/forge-validator/ForgeValidator.sol
> Compiling ./contracts/masset/forge-validator/IForgeValidator.sol
> Compiling ./contracts/masset/mUSD.sol
> Compiling ./contracts/masset/platform-integrations/AaveIntegration.sol
> Compiling ./contracts/masset/platform-integrations/CompoundIntegration.sol
> Compiling ./contracts/masset/platform-integrations/IAave.sol
> Compiling ./contracts/masset/platform-integrations/ICompound.sol
> Compiling ./contracts/masset/platform-integrations/InitializableAbstractIntegration.sol
> Compiling ./contracts/masset/shared/MassetHelpers.sol
> Compiling ./contracts/masset/shared/MassetStructs.sol
> Compiling ./contracts/nexus/Nexus.sol
> Compiling ./contracts/savings/SavingsContract.sol
> Compiling ./contracts/savings/SavingsManager.sol
> Compiling ./contracts/shared/CommonHelpers.sol
> Compiling ./contracts/shared/InitializableModule.sol
> Compiling ./contracts/shared/InitializableModuleKeys.sol
> Compiling ./contracts/shared/Module.sol
> Compiling ./contracts/shared/ModuleKeys.sol
> Compiling ./contracts/shared/PausableModule.sol
> Compiling ./contracts/shared/StableMath.sol
> Compiling ./contracts/upgradability/DelayedProxyAdmin.sol
> Compiling ./contracts/z_mocks/governance/MockGovernable.sol
> Compiling ./contracts/z_mocks/masset/platform-integrations/MockAave.sol
> Compiling ./contracts/z_mocks/masset/platform-integrations/MockCToken.sol
> Compiling ./contracts/z_mocks/masset/platform-integrations/MockCompoundIntegration.sol
> Compiling ./contracts/z_mocks/masset/platform-integrations/MockUpgradedAaveIntegration.sol
> Compiling ./contracts/z_mocks/nexus/MockNexus.sol
> Compiling ./contracts/z_mocks/shared/MockCommonHelpers.sol
> Compiling ./contracts/z_mocks/shared/MockERC20.sol
> Compiling ./contracts/z_mocks/shared/MockERC20WithFee.sol
> Compiling ./contracts/z_mocks/shared/MockInitializableModule.sol
> Compiling ./contracts/z_mocks/shared/MockModule.sol
> Compiling ./contracts/z_mocks/shared/MockPausableModule.sol
> Compiling ./contracts/z_mocks/shared/MockProxy.sol
> Compiling ./contracts/z_mocks/shared/PublicStableMath.sol
> Compiling ./contracts/z_mocks/upgradability/MockImplementation.sol
> Compiling @openzeppelin/upgrades/contracts/Initializable.sol
> Compiling @openzeppelin/upgrades/contracts/upgradeability/AdminUpgradeabilityProxy.sol
> Compiling @openzeppelin/upgrades/contracts/upgradeability/BaseAdminUpgradeabilityProxy.sol
> Compiling @openzeppelin/upgrades/contracts/upgradeability/BaseUpgradeabilityProxy.sol
> Compiling @openzeppelin/upgrades/contracts/upgradeability/InitializableAdminUpgradeabilityProxy.sol
> Compiling @openzeppelin/upgrades/contracts/upgradeability/InitializableUpgradeabilityProxy.sol
> Compiling @openzeppelin/upgrades/contracts/upgradeability/Proxy.sol
> Compiling @openzeppelin/upgrades/contracts/upgradeability/UpgradeabilityProxy.sol
> Compiling @openzeppelin/upgrades/contracts/utils/Address.sol
> Compiling openzeppelin-solidity/contracts/access/Roles.sol
> Compiling openzeppelin-solidity/contracts/access/roles/MinterRole.sol
> Compiling openzeppelin-solidity/contracts/math/SafeMath.sol
> Compiling openzeppelin-solidity/contracts/token/ERC20/ERC20.sol
> Compiling openzeppelin-solidity/contracts/token/ERC20/ERC20Detailed.sol
> Compiling openzeppelin-solidity/contracts/token/ERC20/ERC20Mintable.sol
> Compiling openzeppelin-solidity/contracts/token/ERC20/IERC20.sol
> Compiling openzeppelin-solidity/contracts/token/ERC20/SafeERC20.sol
> Compiling openzeppelin-solidity/contracts/utils/Address.sol
> Compilation warnings encountered:

    /Users/jitendra/work/mStable/mStable-contracts/contracts/interfaces/IBasketManager.sol:2:1: Warning: Experimental features are turned on. Do not use experimental features on live deployments.
pragma experimental ABIEncoderV2;
^-------------------------------^
,/Users/jitendra/work/mStable/mStable-contracts/contracts/masset/BasketManager.sol:2:1: Warning: Experimental features are turned on. Do not use experimental features on live deployments.
pragma experimental ABIEncoderV2;
^-------------------------------^
,/Users/jitendra/work/mStable/mStable-contracts/contracts/masset/forge-validator/IForgeValidator.sol:2:1: Warning: Experimental features are turned on. Do not use experimental features on live deployments.
pragma experimental ABIEncoderV2;
^-------------------------------^
,/Users/jitendra/work/mStable/mStable-contracts/contracts/masset/Masset.sol:2:1: Warning: Experimental features are turned on. Do not use experimental features on live deployments.
pragma experimental ABIEncoderV2;
^-------------------------------^
,/Users/jitendra/work/mStable/mStable-contracts/contracts/masset/forge-validator/ForgeValidator.sol:2:1: Warning: Experimental features are turned on. Do not use experimental features on live deployments.
pragma experimental ABIEncoderV2;
^-------------------------------^
,/Users/jitendra/work/mStable/mStable-contracts/contracts/masset/mUSD.sol:2:1: Warning: Experimental features are turned on. Do not use experimental features on live deployments.
pragma experimental ABIEncoderV2;
^-------------------------------^
,/Users/jitendra/work/mStable/mStable-contracts/contracts/masset/platform-integrations/CompoundIntegration.sol:73:9: Warning: Unused function parameter. Remove or comment out the variable name to silence this warning.
        bool _isTokenFeeCharged
        ^---------------------^
,/Users/jitendra/work/mStable/mStable-contracts/contracts/z_mocks/masset/platform-integrations/MockUpgradedAaveIntegration.sol:51:9: Warning: Unused function parameter. Remove or comment out the variable name to silence this warning.
        bool _isTokenFeeCharged
        ^---------------------^
,/Users/jitendra/work/mStable/mStable-contracts/contracts/z_mocks/masset/platform-integrations/MockUpgradedAaveIntegration.sol:218:9: Warning: Unused function parameter. Remove or comment out the variable name to silence this warning.
        bool _isTokenFeeCharged
        ^---------------------^

> Artifacts written to /Users/jitendra/work/mStable/mStable-contracts/build/contracts
> Compiled successfully using:
   - solc: 0.5.16+commit.9c3226ce.Emscripten.clang


- Fetching solc version list from solc-bin. Attempt #1

INFO:Detectors:[91m
UpgradeabilityProxy.constructor(address,bytes) (@openzeppelin/upgrades/contracts/upgradeability/UpgradeabilityProxy.sol#19-26) uses delegatecall to a input-controlled function id
	- (success) = _logic.delegatecall(_data) (@openzeppelin/upgrades/contracts/upgradeability/UpgradeabilityProxy.sol#23)
BaseAdminUpgradeabilityProxy.upgradeToAndCall(address,bytes) (@openzeppelin/upgrades/contracts/upgradeability/BaseAdminUpgradeabilityProxy.sol#85-89) uses delegatecall to a input-controlled function id
	- (success) = newImplementation.delegatecall(data) (@openzeppelin/upgrades/contracts/upgradeability/BaseAdminUpgradeabilityProxy.sol#87)
InitializableUpgradeabilityProxy.initialize(address,bytes) (@openzeppelin/upgrades/contracts/upgradeability/InitializableUpgradeabilityProxy.sol#19-27) uses delegatecall to a input-controlled function id
	- (success) = _logic.delegatecall(_data) (@openzeppelin/upgrades/contracts/upgradeability/InitializableUpgradeabilityProxy.sol#24)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#controlled-delegatecall[0m
INFO:Detectors:[91m
Reentrancy in DelayedProxyAdmin.acceptUpgradeRequest(address) (upgradability/DelayedProxyAdmin.sol#88-108):
	External calls:
	- oldImpl = getProxyImplementation(_proxy) (upgradability/DelayedProxyAdmin.sol#97)
	- AdminUpgradeabilityProxy(_proxy).upgradeTo(newImpl) (upgradability/DelayedProxyAdmin.sol#101)
	- AdminUpgradeabilityProxy(_proxy).upgradeToAndCall.value(msg.value)(newImpl,data) (upgradability/DelayedProxyAdmin.sol#103)
	External calls sending eth:
	- AdminUpgradeabilityProxy(_proxy).upgradeToAndCall.value(msg.value)(newImpl,data) (upgradability/DelayedProxyAdmin.sol#103)
	State variables written after the call(s):
	- DelayedProxyAdmin.requests (upgradability/DelayedProxyAdmin.sol#37) in delete requests[_proxy] (upgradability/DelayedProxyAdmin.sol#106)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities[0m
INFO:Detectors:[91m
MockImplementationV2.proxyAdmin (z_mocks/upgradability/MockImplementation.sol#26) is never initialized. It is used in:
MockImplementationV3.proxyAdmin (z_mocks/upgradability/MockImplementation.sol#43) is never initialized. It is used in:
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#uninitialized-state-variables[0m
INFO:Detectors:[93m
Contract locking ether found in :
	Contract MockImplementationV2 (z_mocks/upgradability/MockImplementation.sol#23-38) has payable functions:
	 - MockImplementationV2.initializeV2() (z_mocks/upgradability/MockImplementation.sol#33-37)
	But does not have a function to withdraw the ether
Contract locking ether found in :
	Contract MockImplementationV3 (z_mocks/upgradability/MockImplementation.sol#40-55) has payable functions:
	 - MockImplementationV3.initializeV3() (z_mocks/upgradability/MockImplementation.sol#50-54)
	But does not have a function to withdraw the ether
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#contracts-that-lock-ether[0m
INFO:Detectors:[93m
Reentrancy in Masset._mintTo(address,uint256,address) (masset/Masset.sol#166-201):
	External calls:
	- props = basketManager.prepareForgeBasset(_bAsset,true) (masset/Masset.sol#177)
	- quantityTransferred = MassetHelpers.transferTokens(msg.sender,integrator,_bAsset,xferCharged,_bAssetQuantity) (masset/Masset.sol#183)
	- quantityDeposited = IPlatformIntegration(integrator).deposit(_bAsset,quantityTransferred,xferCharged) (masset/Masset.sol#184)
	- basketManager.increaseVaultBalance(props.index,integrator,quantityDeposited) (masset/Masset.sol#191)
	State variables written after the call(s):
	- ERC20._totalSupply (openzeppelin-solidity/contracts/token/ERC20/ERC20.sol#36) in _mint(_recipient,ratioedBasset) (masset/Masset.sol#197)
Reentrancy in Masset._redeemTo(address,uint256,address) (masset/Masset.sol#323-365):
	External calls:
	- props = basketManager.prepareForgeBasset(_bAsset,false) (masset/Masset.sol#337)
	- basketManager.decreaseVaultBalance(props.index,props.integrator,_bAssetQuantity) (masset/Masset.sol#349)
	State variables written after the call(s):
	- ERC20._totalSupply (openzeppelin-solidity/contracts/token/ERC20/ERC20.sol#36) in _burn(msg.sender,massetQuantity) (masset/Masset.sol#358)
Reentrancy in BasketManager.collectInterest() (masset/BasketManager.sol#127-161):
	External calls:
	- balance = IPlatformIntegration(integrations[i]).checkBalance(b.addr) (masset/BasketManager.sol#141)
	State variables written after the call(s):
	- BasketManager.basket (masset/BasketManager.sol#40) in basket.bassets[i].vaultBalance = balance (masset/BasketManager.sol#147)
Reentrancy in DelayedProxyAdmin.proposeUpgrade(address,address,bytes) (upgradability/DelayedProxyAdmin.sol#51-70):
	External calls:
	- validateProxy(_proxy,_implementation) (upgradability/DelayedProxyAdmin.sol#62)
	State variables written after the call(s):
	- DelayedProxyAdmin.requests (upgradability/DelayedProxyAdmin.sol#37) in request.implementation = _implementation (upgradability/DelayedProxyAdmin.sol#65)
	- DelayedProxyAdmin.requests (upgradability/DelayedProxyAdmin.sol#37) in request.data = _data (upgradability/DelayedProxyAdmin.sol#66)
	- DelayedProxyAdmin.requests (upgradability/DelayedProxyAdmin.sol#37) in request.timestamp = now (upgradability/DelayedProxyAdmin.sol#67)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities-1[0m
INFO:Detectors:[93m
BasketManager._setBasketWeights(address[],uint256[]) (masset/BasketManager.sol#261-290) contains a tautology or contradiction:
	- require(bool,string)(bassetWeight >= 0,Weight must be positive) (masset/BasketManager.sol#279)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#tautology-or-contradiction[0m
INFO:Detectors:[93m
SavingsManager.constructor(address,address,ISavingsContract) (savings/SavingsManager.sol#44-54) ignores return value by IERC20(_mUSD).approve(address(_savingsContract),uint256(- 1)) (savings/SavingsManager.sol#53)
SavingsManager.withdrawUnallocatedInterest(address,address) (savings/SavingsManager.sol#139-148) ignores return value by mAsset.transfer(_recipient,balance) (savings/SavingsManager.sol#145)
MockCToken.mint(uint256) (z_mocks/masset/platform-integrations/MockCToken.sol#31-38) ignores return value by underlyingToken.transferFrom(msg.sender,address(this),mintAmount) (z_mocks/masset/platform-integrations/MockCToken.sol#35)
MockCToken.redeemUnderlying(uint256) (z_mocks/masset/platform-integrations/MockCToken.sol#40-49) ignores return value by underlyingToken.transfer(msg.sender,redeemAmount) (z_mocks/masset/platform-integrations/MockCToken.sol#48)
MockAave.deposit(address,uint256,uint16) (z_mocks/masset/platform-integrations/MockAave.sol#49-54) ignores return value by MassetHelpers.transferTokens(msg.sender,address(this),_reserve,true,_amount) (z_mocks/masset/platform-integrations/MockAave.sol#51)
MockAave.deposit(address,uint256,uint16) (z_mocks/masset/platform-integrations/MockAave.sol#49-54) ignores return value by ERC20Mintable(reserveToAToken[_reserve]).mint(msg.sender,_amount) (z_mocks/masset/platform-integrations/MockAave.sol#53)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#unused-return[0m
INFO:Detectors:[92m
MassetToken.constructor(string,string,uint8)._name (masset/MassetToken.sol#16) shadows:
	- ERC20Detailed._name (openzeppelin-solidity/contracts/token/ERC20/ERC20Detailed.sol#9) (state variable)
MassetToken.constructor(string,string,uint8)._symbol (masset/MassetToken.sol#17) shadows:
	- ERC20Detailed._symbol (openzeppelin-solidity/contracts/token/ERC20/ERC20Detailed.sol#10) (state variable)
MassetToken.constructor(string,string,uint8)._decimals (masset/MassetToken.sol#18) shadows:
	- ERC20Detailed._decimals (openzeppelin-solidity/contracts/token/ERC20/ERC20Detailed.sol#11) (state variable)
ERC20WithFee.constructor(string,string,uint8).name (z_mocks/shared/MockERC20WithFee.sol#55) shadows:
	- ERC20WithFee.name() (z_mocks/shared/MockERC20WithFee.sol#64-66) (function)
ERC20WithFee.constructor(string,string,uint8).symbol (z_mocks/shared/MockERC20WithFee.sol#55) shadows:
	- ERC20WithFee.symbol() (z_mocks/shared/MockERC20WithFee.sol#72-74) (function)
ERC20WithFee.constructor(string,string,uint8).decimals (z_mocks/shared/MockERC20WithFee.sol#55) shadows:
	- ERC20WithFee.decimals() (z_mocks/shared/MockERC20WithFee.sol#88-90) (function)
MockERC20WithFee.constructor(string,string,uint8,address,uint256)._name (z_mocks/shared/MockERC20WithFee.sol#304) shadows:
	- ERC20WithFee._name (z_mocks/shared/MockERC20WithFee.sol#44) (state variable)
MockERC20WithFee.constructor(string,string,uint8,address,uint256)._symbol (z_mocks/shared/MockERC20WithFee.sol#305) shadows:
	- ERC20WithFee._symbol (z_mocks/shared/MockERC20WithFee.sol#45) (state variable)
MockERC20WithFee.constructor(string,string,uint8,address,uint256)._decimals (z_mocks/shared/MockERC20WithFee.sol#306) shadows:
	- ERC20WithFee._decimals (z_mocks/shared/MockERC20WithFee.sol#46) (state variable)
Masset.constructor(string,string,address,address,address,address)._name (masset/Masset.sol#56) shadows:
	- ERC20Detailed._name (openzeppelin-solidity/contracts/token/ERC20/ERC20Detailed.sol#9) (state variable)
Masset.constructor(string,string,address,address,address,address)._symbol (masset/Masset.sol#57) shadows:
	- ERC20Detailed._symbol (openzeppelin-solidity/contracts/token/ERC20/ERC20Detailed.sol#10) (state variable)
MockERC20.constructor(string,string,uint8,address,uint256)._name (z_mocks/shared/MockERC20.sol#10) shadows:
	- ERC20Detailed._name (openzeppelin-solidity/contracts/token/ERC20/ERC20Detailed.sol#9) (state variable)
MockERC20.constructor(string,string,uint8,address,uint256)._symbol (z_mocks/shared/MockERC20.sol#11) shadows:
	- ERC20Detailed._symbol (openzeppelin-solidity/contracts/token/ERC20/ERC20Detailed.sol#10) (state variable)
MockERC20.constructor(string,string,uint8,address,uint256)._decimals (z_mocks/shared/MockERC20.sol#12) shadows:
	- ERC20Detailed._decimals (openzeppelin-solidity/contracts/token/ERC20/ERC20Detailed.sol#11) (state variable)
Nexus.constructor(address)._governor (nexus/Nexus.sol#61) shadows:
	- Governable._governor (governance/Governable.sol#14) (state variable)
Nexus.initialize(bytes32[],address[],bool[],address)._governor (nexus/Nexus.sol#80) shadows:
	- Governable._governor (governance/Governable.sol#14) (state variable)
ClaimableGovernor.constructor(address)._governor (governance/ClaimableGovernor.sol#26) shadows:
	- Governable._governor (governance/Governable.sol#14) (state variable)
ERC20Detailed.constructor(string,string,uint8).name (openzeppelin-solidity/contracts/token/ERC20/ERC20Detailed.sol#18) shadows:
	- ERC20Detailed.name() (openzeppelin-solidity/contracts/token/ERC20/ERC20Detailed.sol#27-29) (function)
ERC20Detailed.constructor(string,string,uint8).symbol (openzeppelin-solidity/contracts/token/ERC20/ERC20Detailed.sol#18) shadows:
	- ERC20Detailed.symbol() (openzeppelin-solidity/contracts/token/ERC20/ERC20Detailed.sol#35-37) (function)
ERC20Detailed.constructor(string,string,uint8).decimals (openzeppelin-solidity/contracts/token/ERC20/ERC20Detailed.sol#18) shadows:
	- ERC20Detailed.decimals() (openzeppelin-solidity/contracts/token/ERC20/ERC20Detailed.sol#51-53) (function)
DelayedClaimableGovernor.constructor(address,uint256)._governor (governance/DelayedClaimableGovernor.sol#25) shadows:
	- Governable._governor (governance/Governable.sol#14) (state variable)
MockNexus.constructor(address,address,address)._governor (z_mocks/nexus/MockNexus.sol#9) shadows:
	- Governable._governor (governance/Governable.sol#14) (state variable)
AdminUpgradeabilityProxy.constructor(address,address,bytes)._admin (@openzeppelin/upgrades/contracts/upgradeability/AdminUpgradeabilityProxy.sol#20) shadows:
	- BaseAdminUpgradeabilityProxy._admin() (@openzeppelin/upgrades/contracts/upgradeability/BaseAdminUpgradeabilityProxy.sol#94-99) (function)
InitializableAdminUpgradeabilityProxy.initialize(address,address,bytes)._admin (@openzeppelin/upgrades/contracts/upgradeability/InitializableAdminUpgradeabilityProxy.sol#21) shadows:
	- BaseAdminUpgradeabilityProxy._admin() (@openzeppelin/upgrades/contracts/upgradeability/BaseAdminUpgradeabilityProxy.sol#94-99) (function)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#local-variable-shadowing[0m
INFO:Detectors:[92m
BasketManager.collectInterest() (masset/BasketManager.sol#127-161) has external calls inside a loop: balance = IPlatformIntegration(integrations[i]).checkBalance(b.addr) (masset/BasketManager.sol#141)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation/#calls-inside-a-loop[0m
INFO:Detectors:[92m
Reentrancy in Masset._mintTo(address,uint256,address) (masset/Masset.sol#166-201):
	External calls:
	- props = basketManager.prepareForgeBasset(_bAsset,true) (masset/Masset.sol#177)
	- quantityTransferred = MassetHelpers.transferTokens(msg.sender,integrator,_bAsset,xferCharged,_bAssetQuantity) (masset/Masset.sol#183)
	- quantityDeposited = IPlatformIntegration(integrator).deposit(_bAsset,quantityTransferred,xferCharged) (masset/Masset.sol#184)
	- basketManager.increaseVaultBalance(props.index,integrator,quantityDeposited) (masset/Masset.sol#191)
	State variables written after the call(s):
	- ERC20._balances (openzeppelin-solidity/contracts/token/ERC20/ERC20.sol#32) in _mint(_recipient,ratioedBasset) (masset/Masset.sol#197)
Reentrancy in Masset._mintTo(uint32,uint256[],address) (masset/Masset.sol#210-261):
	External calls:
	- props = basketManager.prepareForgeBassets(_bassetsBitmap,uint8(len),true) (masset/Masset.sol#222-223)
	State variables written after the call(s):
	- ERC20._balances (openzeppelin-solidity/contracts/token/ERC20/ERC20.sol#32) in _mint(_recipient,massetQuantity) (masset/Masset.sol#257)
	- ERC20._totalSupply (openzeppelin-solidity/contracts/token/ERC20/ERC20.sol#36) in _mint(_recipient,massetQuantity) (masset/Masset.sol#257)
Reentrancy in Masset._redeemTo(address,uint256,address) (masset/Masset.sol#323-365):
	External calls:
	- props = basketManager.prepareForgeBasset(_bAsset,false) (masset/Masset.sol#337)
	- basketManager.decreaseVaultBalance(props.index,props.integrator,_bAssetQuantity) (masset/Masset.sol#349)
	State variables written after the call(s):
	- ERC20._balances (openzeppelin-solidity/contracts/token/ERC20/ERC20.sol#32) in _payRedemptionFee(massetQuantity,msg.sender) (masset/Masset.sol#352)
	- ERC20._balances (openzeppelin-solidity/contracts/token/ERC20/ERC20.sol#32) in _burn(msg.sender,massetQuantity) (masset/Masset.sol#358)
Reentrancy in Masset._redeemTo(uint32,uint256[],address) (masset/Masset.sol#372-430):
	External calls:
	- props = basketManager.prepareForgeBassets(_bassetsBitmap,uint8(redemptionAssetCount),false) (masset/Masset.sol#388-389)
	State variables written after the call(s):
	- ERC20._balances (openzeppelin-solidity/contracts/token/ERC20/ERC20.sol#32) in _payRedemptionFee(massetQuantity,msg.sender) (masset/Masset.sol#413)
	- ERC20._balances (openzeppelin-solidity/contracts/token/ERC20/ERC20.sol#32) in _burn(msg.sender,massetQuantity) (masset/Masset.sol#419)
	- ERC20._totalSupply (openzeppelin-solidity/contracts/token/ERC20/ERC20.sol#36) in _burn(msg.sender,massetQuantity) (masset/Masset.sol#419)
Reentrancy in MockAave.addAToken(address,address) (z_mocks/masset/platform-integrations/MockAave.sol#44-47):
	External calls:
	- MassetHelpers.safeInfiniteApprove(_underlying,_aToken) (z_mocks/masset/platform-integrations/MockAave.sol#45)
	State variables written after the call(s):
	- MockAave.reserveToAToken (z_mocks/masset/platform-integrations/MockAave.sol#40) in reserveToAToken[_underlying] = _aToken (z_mocks/masset/platform-integrations/MockAave.sol#46)
Reentrancy in Masset.collectInterest() (masset/Masset.sol#514-527):
	External calls:
	- (interestCollected,bitmap,gains) = basketManager.collectInterest() (masset/Masset.sol#520)
	State variables written after the call(s):
	- ERC20._balances (openzeppelin-solidity/contracts/token/ERC20/ERC20.sol#32) in _mint(msg.sender,interestCollected) (masset/Masset.sol#523)
	- ERC20._totalSupply (openzeppelin-solidity/contracts/token/ERC20/ERC20.sol#36) in _mint(msg.sender,interestCollected) (masset/Masset.sol#523)
Reentrancy in SavingsContract.depositInterest(uint256) (savings/SavingsContract.sol#74-95):
	External calls:
	- require(bool,string)(mUSD.transferFrom(msg.sender,address(this),_amount),Must receive tokens) (savings/SavingsContract.sol#81)
	State variables written after the call(s):
	- SavingsContract.exchangeRate (savings/SavingsContract.sol#37) in exchangeRate = totalSavings.divPrecisely(totalCredits) (savings/SavingsContract.sol#91)
	- SavingsContract.totalSavings (savings/SavingsContract.sol#31) in totalSavings = totalSavings.add(_amount) (savings/SavingsContract.sol#82)
Reentrancy in SavingsContract.depositSavings(uint256) (savings/SavingsContract.sol#103-126):
	External calls:
	- ISavingsManager(_savingsManager()).collectAndDistributeInterest(address(mUSD)) (savings/SavingsContract.sol#111)
	- require(bool,string)(mUSD.transferFrom(msg.sender,address(this),_amount),Must receive tokens) (savings/SavingsContract.sol#115)
	State variables written after the call(s):
	- SavingsContract.creditBalances (savings/SavingsContract.sol#38) in creditBalances[msg.sender] = creditBalances[msg.sender].add(creditsIssued) (savings/SavingsContract.sol#123)
	- SavingsContract.totalCredits (savings/SavingsContract.sol#32) in totalCredits = totalCredits.add(creditsIssued) (savings/SavingsContract.sol#120)
	- SavingsContract.totalSavings (savings/SavingsContract.sol#31) in totalSavings = totalSavings.add(_amount) (savings/SavingsContract.sol#116)
Reentrancy in MockCToken.mint(uint256) (z_mocks/masset/platform-integrations/MockCToken.sol#31-38):
	External calls:
	- underlyingToken.transferFrom(msg.sender,address(this),mintAmount) (z_mocks/masset/platform-integrations/MockCToken.sol#35)
	State variables written after the call(s):
	- ERC20._balances (openzeppelin-solidity/contracts/token/ERC20/ERC20.sol#32) in _mint(msg.sender,mintAmount.divPrecisely(exchangeRate)) (z_mocks/masset/platform-integrations/MockCToken.sol#37)
	- ERC20._totalSupply (openzeppelin-solidity/contracts/token/ERC20/ERC20.sol#36) in _mint(msg.sender,mintAmount.divPrecisely(exchangeRate)) (z_mocks/masset/platform-integrations/MockCToken.sol#37)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities-2[0m
INFO:Detectors:[92m
Reentrancy in Masset._mintTo(address,uint256,address) (masset/Masset.sol#166-201):
	External calls:
	- props = basketManager.prepareForgeBasset(_bAsset,true) (masset/Masset.sol#177)
	- quantityTransferred = MassetHelpers.transferTokens(msg.sender,integrator,_bAsset,xferCharged,_bAssetQuantity) (masset/Masset.sol#183)
	- quantityDeposited = IPlatformIntegration(integrator).deposit(_bAsset,quantityTransferred,xferCharged) (masset/Masset.sol#184)
	- basketManager.increaseVaultBalance(props.index,integrator,quantityDeposited) (masset/Masset.sol#191)
	Event emitted after the call(s):
	- Minted(_recipient,ratioedBasset,_bAsset,quantityDeposited) (masset/Masset.sol#198)
Reentrancy in Masset._mintTo(uint32,uint256[],address) (masset/Masset.sol#210-261):
	External calls:
	- props = basketManager.prepareForgeBassets(_bassetsBitmap,uint8(len),true) (masset/Masset.sol#222-223)
	Event emitted after the call(s):
	- MintedMulti(_recipient,massetQuantity,_bassetsBitmap,_bassetQuantity) (masset/Masset.sol#258)
Reentrancy in Masset._redeemTo(address,uint256,address) (masset/Masset.sol#323-365):
	External calls:
	- props = basketManager.prepareForgeBasset(_bAsset,false) (masset/Masset.sol#337)
	- basketManager.decreaseVaultBalance(props.index,props.integrator,_bAssetQuantity) (masset/Masset.sol#349)
	- IPlatformIntegration(props.integrator).withdraw(_recipient,props.bAsset.addr,_bAssetQuantity,props.bAsset.isTransferFeeCharged) (masset/Masset.sol#361)
	Event emitted after the call(s):
	- Redeemed(_recipient,msg.sender,massetQuantity,_bAsset,_bAssetQuantity) (masset/Masset.sol#363)
Reentrancy in Masset._redeemTo(uint32,uint256[],address) (masset/Masset.sol#372-430):
	External calls:
	- props = basketManager.prepareForgeBassets(_bassetsBitmap,uint8(redemptionAssetCount),false) (masset/Masset.sol#388-389)
	Event emitted after the call(s):
	- RedeemedMulti(_recipient,msg.sender,massetQuantity,_bassetsBitmap,_bassetQuantities) (masset/Masset.sol#428)
Reentrancy in DelayedProxyAdmin.acceptUpgradeRequest(address) (upgradability/DelayedProxyAdmin.sol#88-108):
	External calls:
	- oldImpl = getProxyImplementation(_proxy) (upgradability/DelayedProxyAdmin.sol#97)
	- AdminUpgradeabilityProxy(_proxy).upgradeTo(newImpl) (upgradability/DelayedProxyAdmin.sol#101)
	- AdminUpgradeabilityProxy(_proxy).upgradeToAndCall.value(msg.value)(newImpl,data) (upgradability/DelayedProxyAdmin.sol#103)
	External calls sending eth:
	- AdminUpgradeabilityProxy(_proxy).upgradeToAndCall.value(msg.value)(newImpl,data) (upgradability/DelayedProxyAdmin.sol#103)
	Event emitted after the call(s):
	- Upgraded(_proxy,oldImpl,newImpl,data) (upgradability/DelayedProxyAdmin.sol#107)
Reentrancy in SavingsManager.collectAndDistributeInterest(address) (savings/SavingsManager.sol#86-133):
	External calls:
	- (interestCollected,totalSupply) = mAsset.collectInterest() (savings/SavingsManager.sol#99)
	Event emitted after the call(s):
	- InterestCollected(_mAsset,interestCollected,totalSupply,extrapolatedAPY) (savings/SavingsManager.sol#118)
	- InterestCollected(_mAsset,0,totalSupply,0) (savings/SavingsManager.sol#130)
Reentrancy in SavingsManager.collectAndDistributeInterest(address) (savings/SavingsManager.sol#86-133):
	External calls:
	- (interestCollected,totalSupply) = mAsset.collectInterest() (savings/SavingsManager.sol#99)
	- target.depositInterest(saversShare) (savings/SavingsManager.sol#126)
	Event emitted after the call(s):
	- InterestDistributed(_mAsset,saversShare) (savings/SavingsManager.sol#128)
Reentrancy in Masset.collectInterest() (masset/Masset.sol#514-527):
	External calls:
	- (interestCollected,bitmap,gains) = basketManager.collectInterest() (masset/Masset.sol#520)
	Event emitted after the call(s):
	- MintedMulti(msg.sender,interestCollected,bitmap,gains) (masset/Masset.sol#524)
Reentrancy in AaveIntegrationV2.deposit(address,uint256,bool) (z_mocks/masset/platform-integrations/MockUpgradedAaveIntegration.sol#16-45):
	External calls:
	- _getLendingPool().deposit(address(_bAsset),_amount,referralCode) (z_mocks/masset/platform-integrations/MockUpgradedAaveIntegration.sol#36)
	- _getLendingPool().deposit(address(_bAsset),_amount,referralCode) (z_mocks/masset/platform-integrations/MockUpgradedAaveIntegration.sol#41)
	Event emitted after the call(s):
	- Deposit(_bAsset,address(aToken),quantityDeposited) (z_mocks/masset/platform-integrations/MockUpgradedAaveIntegration.sol#44)
Reentrancy in AaveIntegrationV3.deposit(address,uint256,bool) (z_mocks/masset/platform-integrations/MockUpgradedAaveIntegration.sol#183-212):
	External calls:
	- _getLendingPool().deposit(address(_bAsset),_amount,referralCode) (z_mocks/masset/platform-integrations/MockUpgradedAaveIntegration.sol#203)
	- _getLendingPool().deposit(address(_bAsset),_amount,referralCode) (z_mocks/masset/platform-integrations/MockUpgradedAaveIntegration.sol#208)
	Event emitted after the call(s):
	- Deposit(_bAsset,address(aToken),quantityDeposited) (z_mocks/masset/platform-integrations/MockUpgradedAaveIntegration.sol#211)
Reentrancy in CompoundIntegration.deposit(address,uint256,bool) (masset/platform-integrations/CompoundIntegration.sol#31-60):
	External calls:
	- prevBal = _checkBalance(cToken) (masset/platform-integrations/CompoundIntegration.sol#50)
	- assert(bool)(cToken.mint(_amount) == 0) (masset/platform-integrations/CompoundIntegration.sol#51)
	- newBal = _checkBalance(cToken) (masset/platform-integrations/CompoundIntegration.sol#52)
	- assert(bool)(cToken.mint(_amount) == 0) (masset/platform-integrations/CompoundIntegration.sol#56)
	Event emitted after the call(s):
	- Deposit(_bAsset,address(cToken),quantityDeposited) (masset/platform-integrations/CompoundIntegration.sol#59)
Reentrancy in AaveIntegration.deposit(address,uint256,bool) (masset/platform-integrations/AaveIntegration.sol#29-59):
	External calls:
	- _getLendingPool().deposit(_bAsset,_amount,referralCode) (masset/platform-integrations/AaveIntegration.sol#50)
	- _getLendingPool().deposit(_bAsset,_amount,referralCode) (masset/platform-integrations/AaveIntegration.sol#55)
	Event emitted after the call(s):
	- Deposit(_bAsset,address(aToken),quantityDeposited) (masset/platform-integrations/AaveIntegration.sol#58)
Reentrancy in SavingsContract.depositInterest(uint256) (savings/SavingsContract.sol#74-95):
	External calls:
	- require(bool,string)(mUSD.transferFrom(msg.sender,address(this),_amount),Must receive tokens) (savings/SavingsContract.sol#81)
	Event emitted after the call(s):
	- ExchangeRateUpdated(exchangeRate,_amount) (savings/SavingsContract.sol#93)
Reentrancy in SavingsContract.depositSavings(uint256) (savings/SavingsContract.sol#103-126):
	External calls:
	- ISavingsManager(_savingsManager()).collectAndDistributeInterest(address(mUSD)) (savings/SavingsContract.sol#111)
	- require(bool,string)(mUSD.transferFrom(msg.sender,address(this),_amount),Must receive tokens) (savings/SavingsContract.sol#115)
	Event emitted after the call(s):
	- SavingsDeposited(msg.sender,_amount,creditsIssued) (savings/SavingsContract.sol#125)
Reentrancy in MockCompoundIntegration.logBalance(address) (z_mocks/masset/platform-integrations/MockCompoundIntegration.sol#12-21):
	External calls:
	- balance = _checkBalance(cToken) (z_mocks/masset/platform-integrations/MockCompoundIntegration.sol#18)
	Event emitted after the call(s):
	- CurrentBalance(_bAsset,balance) (z_mocks/masset/platform-integrations/MockCompoundIntegration.sol#20)
Reentrancy in DelayedProxyAdmin.proposeUpgrade(address,address,bytes) (upgradability/DelayedProxyAdmin.sol#51-70):
	External calls:
	- validateProxy(_proxy,_implementation) (upgradability/DelayedProxyAdmin.sol#62)
	Event emitted after the call(s):
	- UpgradeProposed(_proxy,_implementation,_data) (upgradability/DelayedProxyAdmin.sol#69)
Reentrancy in SavingsContract.redeem(uint256) (savings/SavingsContract.sol#133-153):
	External calls:
	- require(bool,string)(mUSD.transfer(msg.sender,massetReturned),Must send tokens) (savings/SavingsContract.sol#150)
	Event emitted after the call(s):
	- CreditsRedeemed(msg.sender,_credits,massetReturned) (savings/SavingsContract.sol#152)
Reentrancy in SavingsManager.setSavingsContract(address,address) (savings/SavingsManager.sol#60-71):
	External calls:
	- IERC20(_mAsset).safeApprove(address(_savingsContract),0) (savings/SavingsManager.sol#67)
	- IERC20(_mAsset).safeApprove(address(_savingsContract),uint256(- 1)) (savings/SavingsManager.sol#68)
	Event emitted after the call(s):
	- SavingsContractEnabled(_mAsset,_savingsContract) (savings/SavingsManager.sol#70)
Reentrancy in AaveIntegrationV2.withdraw(address,address,uint256,bool) (z_mocks/masset/platform-integrations/MockUpgradedAaveIntegration.sol#47-66):
	External calls:
	- aToken.redeem(_amount) (z_mocks/masset/platform-integrations/MockUpgradedAaveIntegration.sol#60)
	- IERC20(_bAsset).safeTransfer(_receiver,_amount) (z_mocks/masset/platform-integrations/MockUpgradedAaveIntegration.sol#63)
	Event emitted after the call(s):
	- Withdrawal(_bAsset,address(aToken),_amount) (z_mocks/masset/platform-integrations/MockUpgradedAaveIntegration.sol#65)
Reentrancy in AaveIntegrationV3.withdraw(address,address,uint256,bool) (z_mocks/masset/platform-integrations/MockUpgradedAaveIntegration.sol#214-233):
	External calls:
	- aToken.redeem(_amount) (z_mocks/masset/platform-integrations/MockUpgradedAaveIntegration.sol#227)
	- IERC20(_bAsset).safeTransfer(_receiver,_amount) (z_mocks/masset/platform-integrations/MockUpgradedAaveIntegration.sol#230)
	Event emitted after the call(s):
	- Withdrawal(_bAsset,address(aToken),_amount) (z_mocks/masset/platform-integrations/MockUpgradedAaveIntegration.sol#232)
Reentrancy in CompoundIntegration.withdraw(address,address,uint256,bool) (masset/platform-integrations/CompoundIntegration.sol#69-88):
	External calls:
	- require(bool,string)(cToken.redeemUnderlying(_amount) == 0,something went wrong) (masset/platform-integrations/CompoundIntegration.sol#82)
	- IERC20(_bAsset).safeTransfer(_receiver,_amount) (masset/platform-integrations/CompoundIntegration.sol#85)
	Event emitted after the call(s):
	- Withdrawal(_bAsset,address(cToken),_amount) (masset/platform-integrations/CompoundIntegration.sol#87)
Reentrancy in AaveIntegration.withdraw(address,address,uint256,bool) (masset/platform-integrations/AaveIntegration.sol#68-98):
	External calls:
	- aToken.redeem(_amount) (masset/platform-integrations/AaveIntegration.sol#87)
	- aToken.redeem(_amount) (masset/platform-integrations/AaveIntegration.sol#91)
	- IERC20(_bAsset).safeTransfer(_receiver,quantityWithdrawn) (masset/platform-integrations/AaveIntegration.sol#95)
	Event emitted after the call(s):
	- Withdrawal(_bAsset,address(aToken),quantityWithdrawn) (masset/platform-integrations/AaveIntegration.sol#97)
Reentrancy in SavingsManager.withdrawUnallocatedInterest(address,address) (savings/SavingsManager.sol#139-148):
	External calls:
	- mAsset.transfer(_recipient,balance) (savings/SavingsManager.sol#145)
	Event emitted after the call(s):
	- InterestWithdrawnByGovernor(_mAsset,_recipient,balance) (savings/SavingsManager.sol#147)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities-3[0m
INFO:Detectors:[92m
BaseUpgradeabilityProxy._implementation() (@openzeppelin/upgrades/contracts/upgradeability/BaseUpgradeabilityProxy.sol#30-35) uses assembly
	- INLINE ASM None (@openzeppelin/upgrades/contracts/upgradeability/BaseUpgradeabilityProxy.sol#32-34)
BaseUpgradeabilityProxy._setImplementation(address) (@openzeppelin/upgrades/contracts/upgradeability/BaseUpgradeabilityProxy.sol#50-58) uses assembly
	- INLINE ASM None (@openzeppelin/upgrades/contracts/upgradeability/BaseUpgradeabilityProxy.sol#55-57)
Proxy._delegate(address) (@openzeppelin/upgrades/contracts/upgradeability/Proxy.sol#30-49) uses assembly
	- INLINE ASM None (@openzeppelin/upgrades/contracts/upgradeability/Proxy.sol#31-48)
Initializable.isConstructor() (@openzeppelin/upgrades/contracts/Initializable.sol#48-58) uses assembly
	- INLINE ASM None (@openzeppelin/upgrades/contracts/Initializable.sol#56)
Address.isContract(address) (openzeppelin-solidity/contracts/utils/Address.sol#17-26) uses assembly
	- INLINE ASM None (openzeppelin-solidity/contracts/utils/Address.sol#24)
BaseAdminUpgradeabilityProxy._admin() (@openzeppelin/upgrades/contracts/upgradeability/BaseAdminUpgradeabilityProxy.sol#94-99) uses assembly
	- INLINE ASM None (@openzeppelin/upgrades/contracts/upgradeability/BaseAdminUpgradeabilityProxy.sol#96-98)
BaseAdminUpgradeabilityProxy._setAdmin(address) (@openzeppelin/upgrades/contracts/upgradeability/BaseAdminUpgradeabilityProxy.sol#105-111) uses assembly
	- INLINE ASM None (@openzeppelin/upgrades/contracts/upgradeability/BaseAdminUpgradeabilityProxy.sol#108-110)
OpenZeppelinUpgradesAddress.isContract(address) (@openzeppelin/upgrades/contracts/utils/Address.sol#19-30) uses assembly
	- INLINE ASM None (@openzeppelin/upgrades/contracts/utils/Address.sol#28)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#assembly-usage[0m
INFO:Detectors:[92m
Different versions of Solidity is used in :
	- Version used: ['0.5.16', '>=0.4.24<0.7.0', '^0.5.0']
	- 0.5.16 (masset/BasketManager.sol#1)
	- ABIEncoderV2 (masset/BasketManager.sol#2)
	- 0.5.16 (z_mocks/masset/platform-integrations/MockUpgradedAaveIntegration.sol#1)
	- 0.5.16 (interfaces/IMasset.sol#1)
	- ^0.5.0 (openzeppelin-solidity/contracts/access/Roles.sol#1)
	- ^0.5.0 (@openzeppelin/upgrades/contracts/upgradeability/BaseUpgradeabilityProxy.sol#1)
	- 0.5.16 (interfaces/ISavingsManager.sol#1)
	- 0.5.16 (masset/platform-integrations/IAave.sol#1)
	- 0.5.16 (masset/MassetToken.sol#1)
	- 0.5.16 (savings/SavingsContract.sol#1)
	- 0.5.16 (interfaces/IBasketManager.sol#1)
	- ABIEncoderV2 (interfaces/IBasketManager.sol#2)
	- 0.5.16 (savings/SavingsManager.sol#1)
	- 0.5.16 (shared/CommonHelpers.sol#1)
	- ^0.5.0 (@openzeppelin/upgrades/contracts/upgradeability/UpgradeabilityProxy.sol#1)
	- 0.5.16 (z_mocks/shared/MockPausableModule.sol#1)
	- 0.5.16 (z_mocks/shared/MockERC20WithFee.sol#1)
	- 0.5.16 (z_mocks/masset/platform-integrations/MockCToken.sol#1)
	- 0.5.16 (masset/Masset.sol#1)
	- ABIEncoderV2 (masset/Masset.sol#2)
	- ^0.5.0 (@openzeppelin/upgrades/contracts/upgradeability/Proxy.sol#1)
	- 0.5.16 (z_mocks/shared/MockERC20.sol#1)
	- 0.5.16 (masset/mUSD.sol#1)
	- ABIEncoderV2 (masset/mUSD.sol#2)
	- 0.5.16 (z_mocks/upgradability/MockImplementation.sol#1)
	- 0.5.16 (masset/shared/MassetStructs.sol#1)
	- 0.5.16 (interfaces/INexus.sol#1)
	- ^0.5.0 (openzeppelin-solidity/contracts/math/SafeMath.sol#1)
	- 0.5.16 (governance/InitializableGovernableWhitelist.sol#1)
	- 0.5.16 (nexus/Nexus.sol#1)
	- >=0.4.24<0.7.0 (@openzeppelin/upgrades/contracts/Initializable.sol#1)
	- 0.5.16 (interfaces/IPlatformIntegration.sol#1)
	- 0.5.16 (masset/shared/MassetHelpers.sol#1)
	- 0.5.16 (z_mocks/governance/MockGovernable.sol#1)
	- 0.5.16 (z_mocks/masset/platform-integrations/MockCompoundIntegration.sol#1)
	- 0.5.16 (governance/Governable.sol#1)
	- ^0.5.0 (openzeppelin-solidity/contracts/token/ERC20/ERC20Mintable.sol#1)
	- ^0.5.0 (openzeppelin-solidity/contracts/token/ERC20/SafeERC20.sol#1)
	- 0.5.16 (shared/InitializableModule.sol#1)
	- 0.5.16 (shared/StableMath.sol#1)
	- 0.5.16 (z_mocks/shared/PublicStableMath.sol#1)
	- 0.5.16 (masset/forge-validator/IForgeValidator.sol#1)
	- ABIEncoderV2 (masset/forge-validator/IForgeValidator.sol#2)
	- ^0.5.0 (openzeppelin-solidity/contracts/utils/Address.sol#1)
	- 0.5.16 (interfaces/ISavingsContract.sol#1)
	- 0.5.16 (masset/forge-validator/ForgeValidator.sol#1)
	- ABIEncoderV2 (masset/forge-validator/ForgeValidator.sol#2)
	- 0.5.16 (masset/platform-integrations/CompoundIntegration.sol#1)
	- 0.5.16 (z_mocks/shared/MockInitializableModule.sol#1)
	- 0.5.16 (masset/platform-integrations/InitializableAbstractIntegration.sol#1)
	- 0.5.16 (z_mocks/masset/platform-integrations/MockAave.sol#1)
	- ^0.5.0 (openzeppelin-solidity/contracts/access/roles/MinterRole.sol#1)
	- 0.5.16 (shared/InitializableModuleKeys.sol#1)
	- 0.5.16 (masset/platform-integrations/AaveIntegration.sol#1)
	- 0.5.16 (z_mocks/shared/MockCommonHelpers.sol#1)
	- 0.5.16 (governance/ClaimableGovernor.sol#1)
	- 0.5.16 (z_mocks/shared/MockModule.sol#1)
	- ^0.5.0 (@openzeppelin/upgrades/contracts/upgradeability/BaseAdminUpgradeabilityProxy.sol#1)
	- 0.5.16 (shared/Module.sol#1)
	- ^0.5.0 (openzeppelin-solidity/contracts/token/ERC20/ERC20Detailed.sol#1)
	- 0.5.16 (Migrations.sol#1)
	- 0.5.16 (shared/ModuleKeys.sol#1)
	- 0.5.16 (masset/platform-integrations/ICompound.sol#1)
	- 0.5.16 (governance/DelayedClaimableGovernor.sol#1)
	- 0.5.16 (shared/PausableModule.sol#1)
	- 0.5.16 (z_mocks/shared/MockProxy.sol#1)
	- ^0.5.0 (openzeppelin-solidity/contracts/token/ERC20/ERC20.sol#1)
	- ^0.5.0 (openzeppelin-solidity/contracts/token/ERC20/IERC20.sol#1)
	- ^0.5.0 (@openzeppelin/upgrades/contracts/upgradeability/InitializableUpgradeabilityProxy.sol#1)
	- 0.5.16 (z_mocks/nexus/MockNexus.sol#1)
	- 0.5.16 (upgradability/DelayedProxyAdmin.sol#1)
	- ^0.5.0 (@openzeppelin/upgrades/contracts/upgradeability/AdminUpgradeabilityProxy.sol#1)
	- ^0.5.0 (@openzeppelin/upgrades/contracts/utils/Address.sol#1)
	- ^0.5.0 (@openzeppelin/upgrades/contracts/upgradeability/InitializableAdminUpgradeabilityProxy.sol#1)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#different-pragma-directives-are-used[0m
INFO:Detectors:[92m
Pragma version0.5.16 (masset/BasketManager.sol#1) necessitates versions too recent to be trusted. Consider deploying with 0.5.11
Pragma version0.5.16 (z_mocks/masset/platform-integrations/MockUpgradedAaveIntegration.sol#1) necessitates versions too recent to be trusted. Consider deploying with 0.5.11
Pragma version0.5.16 (interfaces/IMasset.sol#1) necessitates versions too recent to be trusted. Consider deploying with 0.5.11
Pragma version^0.5.0 (openzeppelin-solidity/contracts/access/Roles.sol#1) allows old versions
Pragma version^0.5.0 (@openzeppelin/upgrades/contracts/upgradeability/BaseUpgradeabilityProxy.sol#1) allows old versions
Pragma version0.5.16 (interfaces/ISavingsManager.sol#1) necessitates versions too recent to be trusted. Consider deploying with 0.5.11
Pragma version0.5.16 (masset/platform-integrations/IAave.sol#1) necessitates versions too recent to be trusted. Consider deploying with 0.5.11
Pragma version0.5.16 (masset/MassetToken.sol#1) necessitates versions too recent to be trusted. Consider deploying with 0.5.11
Pragma version0.5.16 (savings/SavingsContract.sol#1) necessitates versions too recent to be trusted. Consider deploying with 0.5.11
Pragma version0.5.16 (interfaces/IBasketManager.sol#1) necessitates versions too recent to be trusted. Consider deploying with 0.5.11
Pragma version0.5.16 (savings/SavingsManager.sol#1) necessitates versions too recent to be trusted. Consider deploying with 0.5.11
Pragma version0.5.16 (shared/CommonHelpers.sol#1) necessitates versions too recent to be trusted. Consider deploying with 0.5.11
Pragma version^0.5.0 (@openzeppelin/upgrades/contracts/upgradeability/UpgradeabilityProxy.sol#1) allows old versions
Pragma version0.5.16 (z_mocks/shared/MockPausableModule.sol#1) necessitates versions too recent to be trusted. Consider deploying with 0.5.11
Pragma version0.5.16 (z_mocks/shared/MockERC20WithFee.sol#1) necessitates versions too recent to be trusted. Consider deploying with 0.5.11
Pragma version0.5.16 (z_mocks/masset/platform-integrations/MockCToken.sol#1) necessitates versions too recent to be trusted. Consider deploying with 0.5.11
Pragma version0.5.16 (masset/Masset.sol#1) necessitates versions too recent to be trusted. Consider deploying with 0.5.11
Pragma version^0.5.0 (@openzeppelin/upgrades/contracts/upgradeability/Proxy.sol#1) allows old versions
Pragma version0.5.16 (z_mocks/shared/MockERC20.sol#1) necessitates versions too recent to be trusted. Consider deploying with 0.5.11
Pragma version0.5.16 (masset/mUSD.sol#1) necessitates versions too recent to be trusted. Consider deploying with 0.5.11
Pragma version0.5.16 (z_mocks/upgradability/MockImplementation.sol#1) necessitates versions too recent to be trusted. Consider deploying with 0.5.11
Pragma version0.5.16 (masset/shared/MassetStructs.sol#1) necessitates versions too recent to be trusted. Consider deploying with 0.5.11
Pragma version0.5.16 (interfaces/INexus.sol#1) necessitates versions too recent to be trusted. Consider deploying with 0.5.11
Pragma version^0.5.0 (openzeppelin-solidity/contracts/math/SafeMath.sol#1) allows old versions
Pragma version0.5.16 (governance/InitializableGovernableWhitelist.sol#1) necessitates versions too recent to be trusted. Consider deploying with 0.5.11
Pragma version0.5.16 (nexus/Nexus.sol#1) necessitates versions too recent to be trusted. Consider deploying with 0.5.11
Pragma version>=0.4.24<0.7.0 (@openzeppelin/upgrades/contracts/Initializable.sol#1) allows old versions
Pragma version0.5.16 (interfaces/IPlatformIntegration.sol#1) necessitates versions too recent to be trusted. Consider deploying with 0.5.11
Pragma version0.5.16 (masset/shared/MassetHelpers.sol#1) necessitates versions too recent to be trusted. Consider deploying with 0.5.11
Pragma version0.5.16 (z_mocks/governance/MockGovernable.sol#1) necessitates versions too recent to be trusted. Consider deploying with 0.5.11
Pragma version0.5.16 (z_mocks/masset/platform-integrations/MockCompoundIntegration.sol#1) necessitates versions too recent to be trusted. Consider deploying with 0.5.11
Pragma version0.5.16 (governance/Governable.sol#1) necessitates versions too recent to be trusted. Consider deploying with 0.5.11
Pragma version^0.5.0 (openzeppelin-solidity/contracts/token/ERC20/ERC20Mintable.sol#1) allows old versions
Pragma version^0.5.0 (openzeppelin-solidity/contracts/token/ERC20/SafeERC20.sol#1) allows old versions
Pragma version0.5.16 (shared/InitializableModule.sol#1) necessitates versions too recent to be trusted. Consider deploying with 0.5.11
Pragma version0.5.16 (shared/StableMath.sol#1) necessitates versions too recent to be trusted. Consider deploying with 0.5.11
Pragma version0.5.16 (z_mocks/shared/PublicStableMath.sol#1) necessitates versions too recent to be trusted. Consider deploying with 0.5.11
Pragma version0.5.16 (masset/forge-validator/IForgeValidator.sol#1) necessitates versions too recent to be trusted. Consider deploying with 0.5.11
Pragma version^0.5.0 (openzeppelin-solidity/contracts/utils/Address.sol#1) allows old versions
Pragma version0.5.16 (interfaces/ISavingsContract.sol#1) necessitates versions too recent to be trusted. Consider deploying with 0.5.11
Pragma version0.5.16 (masset/forge-validator/ForgeValidator.sol#1) necessitates versions too recent to be trusted. Consider deploying with 0.5.11
Pragma version0.5.16 (masset/platform-integrations/CompoundIntegration.sol#1) necessitates versions too recent to be trusted. Consider deploying with 0.5.11
Pragma version0.5.16 (z_mocks/shared/MockInitializableModule.sol#1) necessitates versions too recent to be trusted. Consider deploying with 0.5.11
Pragma version0.5.16 (masset/platform-integrations/InitializableAbstractIntegration.sol#1) necessitates versions too recent to be trusted. Consider deploying with 0.5.11
Pragma version0.5.16 (z_mocks/masset/platform-integrations/MockAave.sol#1) necessitates versions too recent to be trusted. Consider deploying with 0.5.11
Pragma version^0.5.0 (openzeppelin-solidity/contracts/access/roles/MinterRole.sol#1) allows old versions
Pragma version0.5.16 (shared/InitializableModuleKeys.sol#1) necessitates versions too recent to be trusted. Consider deploying with 0.5.11
Pragma version0.5.16 (masset/platform-integrations/AaveIntegration.sol#1) necessitates versions too recent to be trusted. Consider deploying with 0.5.11
Pragma version0.5.16 (z_mocks/shared/MockCommonHelpers.sol#1) necessitates versions too recent to be trusted. Consider deploying with 0.5.11
Pragma version0.5.16 (governance/ClaimableGovernor.sol#1) necessitates versions too recent to be trusted. Consider deploying with 0.5.11
Pragma version0.5.16 (z_mocks/shared/MockModule.sol#1) necessitates versions too recent to be trusted. Consider deploying with 0.5.11
Pragma version^0.5.0 (@openzeppelin/upgrades/contracts/upgradeability/BaseAdminUpgradeabilityProxy.sol#1) allows old versions
Pragma version0.5.16 (shared/Module.sol#1) necessitates versions too recent to be trusted. Consider deploying with 0.5.11
Pragma version^0.5.0 (openzeppelin-solidity/contracts/token/ERC20/ERC20Detailed.sol#1) allows old versions
Pragma version0.5.16 (Migrations.sol#1) necessitates versions too recent to be trusted. Consider deploying with 0.5.11
Pragma version0.5.16 (shared/ModuleKeys.sol#1) necessitates versions too recent to be trusted. Consider deploying with 0.5.11
Pragma version0.5.16 (masset/platform-integrations/ICompound.sol#1) necessitates versions too recent to be trusted. Consider deploying with 0.5.11
Pragma version0.5.16 (governance/DelayedClaimableGovernor.sol#1) necessitates versions too recent to be trusted. Consider deploying with 0.5.11
Pragma version0.5.16 (shared/PausableModule.sol#1) necessitates versions too recent to be trusted. Consider deploying with 0.5.11
Pragma version0.5.16 (z_mocks/shared/MockProxy.sol#1) necessitates versions too recent to be trusted. Consider deploying with 0.5.11
Pragma version^0.5.0 (openzeppelin-solidity/contracts/token/ERC20/ERC20.sol#1) allows old versions
Pragma version^0.5.0 (openzeppelin-solidity/contracts/token/ERC20/IERC20.sol#1) allows old versions
Pragma version^0.5.0 (@openzeppelin/upgrades/contracts/upgradeability/InitializableUpgradeabilityProxy.sol#1) allows old versions
Pragma version0.5.16 (z_mocks/nexus/MockNexus.sol#1) necessitates versions too recent to be trusted. Consider deploying with 0.5.11
Pragma version0.5.16 (upgradability/DelayedProxyAdmin.sol#1) necessitates versions too recent to be trusted. Consider deploying with 0.5.11
Pragma version^0.5.0 (@openzeppelin/upgrades/contracts/upgradeability/AdminUpgradeabilityProxy.sol#1) allows old versions
Pragma version^0.5.0 (@openzeppelin/upgrades/contracts/utils/Address.sol#1) allows old versions
Pragma version^0.5.0 (@openzeppelin/upgrades/contracts/upgradeability/InitializableAdminUpgradeabilityProxy.sol#1) allows old versions
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#incorrect-versions-of-solidity[0m
INFO:Detectors:[92m
Low level call in UpgradeabilityProxy.constructor(address,bytes) (@openzeppelin/upgrades/contracts/upgradeability/UpgradeabilityProxy.sol#19-26):
	- (success) = _logic.delegatecall(_data) (@openzeppelin/upgrades/contracts/upgradeability/UpgradeabilityProxy.sol#23)
Low level call in SafeERC20.callOptionalReturn(IERC20,bytes) (openzeppelin-solidity/contracts/token/ERC20/SafeERC20.sol#55-74):
	- (success,returndata) = address(token).call(data) (openzeppelin-solidity/contracts/token/ERC20/SafeERC20.sol#67)
Low level call in BaseAdminUpgradeabilityProxy.upgradeToAndCall(address,bytes) (@openzeppelin/upgrades/contracts/upgradeability/BaseAdminUpgradeabilityProxy.sol#85-89):
	- (success) = newImplementation.delegatecall(data) (@openzeppelin/upgrades/contracts/upgradeability/BaseAdminUpgradeabilityProxy.sol#87)
Low level call in InitializableUpgradeabilityProxy.initialize(address,bytes) (@openzeppelin/upgrades/contracts/upgradeability/InitializableUpgradeabilityProxy.sol#19-27):
	- (success) = _logic.delegatecall(_data) (@openzeppelin/upgrades/contracts/upgradeability/InitializableUpgradeabilityProxy.sol#24)
Low level call in DelayedProxyAdmin.getProxyAdmin(address) (upgradability/DelayedProxyAdmin.sol#143-149):
	- (success,returndata) = _proxy.staticcall(0xf851a440) (upgradability/DelayedProxyAdmin.sol#146)
Low level call in DelayedProxyAdmin.getProxyImplementation(address) (upgradability/DelayedProxyAdmin.sol#157-163):
	- (success,returndata) = _proxy.staticcall(0x5c60da1b) (upgradability/DelayedProxyAdmin.sol#160)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#low-level-calls[0m
INFO:Detectors:[92m
Parameter BasketManager.initialize(address,address,uint256,address[],address[],uint256[],bool[])._nexus (masset/BasketManager.sol#52) is not in mixedCase
Parameter BasketManager.initialize(address,address,uint256,address[],address[],uint256[],bool[])._mAsset (masset/BasketManager.sol#53) is not in mixedCase
Parameter BasketManager.initialize(address,address,uint256,address[],address[],uint256[],bool[])._grace (masset/BasketManager.sol#54) is not in mixedCase
Parameter BasketManager.initialize(address,address,uint256,address[],address[],uint256[],bool[])._bassets (masset/BasketManager.sol#55) is not in mixedCase
Parameter BasketManager.initialize(address,address,uint256,address[],address[],uint256[],bool[])._integrators (masset/BasketManager.sol#56) is not in mixedCase
Parameter BasketManager.initialize(address,address,uint256,address[],address[],uint256[],bool[])._weights (masset/BasketManager.sol#57) is not in mixedCase
Parameter BasketManager.initialize(address,address,uint256,address[],address[],uint256[],bool[])._hasTransferFees (masset/BasketManager.sol#58) is not in mixedCase
Parameter BasketManager.increaseVaultBalance(uint8,address,uint256)._bAsset (masset/BasketManager.sol#110) is not in mixedCase
Parameter BasketManager.increaseVaultBalance(uint8,address,uint256)._increaseAmount (masset/BasketManager.sol#110) is not in mixedCase
Parameter BasketManager.decreaseVaultBalance(uint8,address,uint256)._bAsset (masset/BasketManager.sol#119) is not in mixedCase
Parameter BasketManager.decreaseVaultBalance(uint8,address,uint256)._decreaseAmount (masset/BasketManager.sol#119) is not in mixedCase
Parameter BasketManager.addBasset(address,address,bool)._basset (masset/BasketManager.sol#172) is not in mixedCase
Parameter BasketManager.addBasset(address,address,bool)._integration (masset/BasketManager.sol#172) is not in mixedCase
Parameter BasketManager.addBasset(address,address,bool)._isTransferFeeCharged (masset/BasketManager.sol#172) is not in mixedCase
Parameter BasketManager.setBasketWeights(address[],uint256[])._bAssets (masset/BasketManager.sol#245) is not in mixedCase
Parameter BasketManager.setBasketWeights(address[],uint256[])._weights (masset/BasketManager.sol#246) is not in mixedCase
Parameter BasketManager.setTransferFeesFlag(address,bool)._bAsset (masset/BasketManager.sol#306) is not in mixedCase
Parameter BasketManager.setTransferFeesFlag(address,bool)._flag (masset/BasketManager.sol#306) is not in mixedCase
Parameter BasketManager.setGrace(uint256)._newGrace (masset/BasketManager.sol#319) is not in mixedCase
Parameter BasketManager.removeBasset(address)._assetToRemove (masset/BasketManager.sol#332) is not in mixedCase
Parameter BasketManager.prepareForgeBasset(address,bool)._token (masset/BasketManager.sol#385) is not in mixedCase
Parameter BasketManager.prepareForgeBassets(uint32,uint8,bool)._bitmap (masset/BasketManager.sol#409) is not in mixedCase
Parameter BasketManager.prepareForgeBassets(uint32,uint8,bool)._size (masset/BasketManager.sol#410) is not in mixedCase
Parameter BasketManager.getBasset(address)._token (masset/BasketManager.sol#436) is not in mixedCase
Parameter BasketManager.getBassetIntegrator(address)._token (masset/BasketManager.sol#450) is not in mixedCase
Parameter BasketManager.getBitmapFor(address[])._bassets (masset/BasketManager.sol#519) is not in mixedCase
Parameter BasketManager.handlePegLoss(address,bool)._bAsset (masset/BasketManager.sol#600) is not in mixedCase
Parameter BasketManager.handlePegLoss(address,bool)._belowPeg (masset/BasketManager.sol#600) is not in mixedCase
Parameter BasketManager.negateIsolation(address)._bAsset (masset/BasketManager.sol#627) is not in mixedCase
Parameter AaveIntegrationV2.deposit(address,uint256,bool)._bAsset (z_mocks/masset/platform-integrations/MockUpgradedAaveIntegration.sol#17) is not in mixedCase
Parameter AaveIntegrationV2.deposit(address,uint256,bool)._amount (z_mocks/masset/platform-integrations/MockUpgradedAaveIntegration.sol#18) is not in mixedCase
Parameter AaveIntegrationV2.deposit(address,uint256,bool)._isTokenFeeCharged (z_mocks/masset/platform-integrations/MockUpgradedAaveIntegration.sol#19) is not in mixedCase
Parameter AaveIntegrationV2.withdraw(address,address,uint256,bool)._receiver (z_mocks/masset/platform-integrations/MockUpgradedAaveIntegration.sol#48) is not in mixedCase
Parameter AaveIntegrationV2.withdraw(address,address,uint256,bool)._bAsset (z_mocks/masset/platform-integrations/MockUpgradedAaveIntegration.sol#49) is not in mixedCase
Parameter AaveIntegrationV2.withdraw(address,address,uint256,bool)._amount (z_mocks/masset/platform-integrations/MockUpgradedAaveIntegration.sol#50) is not in mixedCase
Parameter AaveIntegrationV2.checkBalance(address)._bAsset (z_mocks/masset/platform-integrations/MockUpgradedAaveIntegration.sol#69) is not in mixedCase
Parameter AaveIntegrationV3.deposit(address,uint256,bool)._bAsset (z_mocks/masset/platform-integrations/MockUpgradedAaveIntegration.sol#184) is not in mixedCase
Parameter AaveIntegrationV3.deposit(address,uint256,bool)._amount (z_mocks/masset/platform-integrations/MockUpgradedAaveIntegration.sol#185) is not in mixedCase
Parameter AaveIntegrationV3.deposit(address,uint256,bool)._isTokenFeeCharged (z_mocks/masset/platform-integrations/MockUpgradedAaveIntegration.sol#186) is not in mixedCase
Parameter AaveIntegrationV3.withdraw(address,address,uint256,bool)._receiver (z_mocks/masset/platform-integrations/MockUpgradedAaveIntegration.sol#215) is not in mixedCase
Parameter AaveIntegrationV3.withdraw(address,address,uint256,bool)._bAsset (z_mocks/masset/platform-integrations/MockUpgradedAaveIntegration.sol#216) is not in mixedCase
Parameter AaveIntegrationV3.withdraw(address,address,uint256,bool)._amount (z_mocks/masset/platform-integrations/MockUpgradedAaveIntegration.sol#217) is not in mixedCase
Parameter AaveIntegrationV3.checkBalance(address)._bAsset (z_mocks/masset/platform-integrations/MockUpgradedAaveIntegration.sol#235) is not in mixedCase
Parameter AaveIntegrationV3.checkBalanceView(address)._bAsset (z_mocks/masset/platform-integrations/MockUpgradedAaveIntegration.sol#291) is not in mixedCase
Parameter SavingsContract.automateInterestCollectionFlag(bool)._enabled (savings/SavingsContract.sol#58) is not in mixedCase
Parameter SavingsContract.depositInterest(uint256)._amount (savings/SavingsContract.sol#74) is not in mixedCase
Parameter SavingsContract.depositSavings(uint256)._amount (savings/SavingsContract.sol#103) is not in mixedCase
Parameter SavingsContract.redeem(uint256)._credits (savings/SavingsContract.sol#133) is not in mixedCase
Constant IBasketManager.version_intf (interfaces/IBasketManager.sol#13) is not in UPPER_CASE_WITH_UNDERSCORES
Parameter SavingsManager.setSavingsContract(address,address)._mAsset (savings/SavingsManager.sol#60) is not in mixedCase
Parameter SavingsManager.setSavingsContract(address,address)._savingsContract (savings/SavingsManager.sol#60) is not in mixedCase
Parameter SavingsManager.setSavingsRate(uint256)._savingsRate (savings/SavingsManager.sol#73) is not in mixedCase
Parameter SavingsManager.collectAndDistributeInterest(address)._mAsset (savings/SavingsManager.sol#86) is not in mixedCase
Parameter SavingsManager.withdrawUnallocatedInterest(address,address)._mAsset (savings/SavingsManager.sol#139) is not in mixedCase
Parameter SavingsManager.withdrawUnallocatedInterest(address,address)._recipient (savings/SavingsManager.sol#139) is not in mixedCase
Constant SavingsManager.secondsInYear (savings/SavingsManager.sol#40) is not in UPPER_CASE_WITH_UNDERSCORES
Constant SavingsManager.maxAPY (savings/SavingsManager.sol#42) is not in UPPER_CASE_WITH_UNDERSCORES
Parameter CommonHelpers.getDecimals(address)._token (shared/CommonHelpers.sol#20) is not in mixedCase
Parameter Masset.mint(address,uint256)._basset (masset/Masset.sol#109) is not in mixedCase
Parameter Masset.mint(address,uint256)._bassetQuantity (masset/Masset.sol#110) is not in mixedCase
Parameter Masset.mintTo(address,uint256,address)._basset (masset/Masset.sol#127) is not in mixedCase
Parameter Masset.mintTo(address,uint256,address)._bassetQuantity (masset/Masset.sol#128) is not in mixedCase
Parameter Masset.mintTo(address,uint256,address)._recipient (masset/Masset.sol#129) is not in mixedCase
Parameter Masset.mintMulti(uint32,uint256[],address)._bassetsBitmap (masset/Masset.sol#145) is not in mixedCase
Parameter Masset.mintMulti(uint32,uint256[],address)._bassetQuantity (masset/Masset.sol#146) is not in mixedCase
Parameter Masset.mintMulti(uint32,uint256[],address)._recipient (masset/Masset.sol#147) is not in mixedCase
Parameter Masset.redeem(address,uint256)._basset (masset/Masset.sol#272) is not in mixedCase
Parameter Masset.redeem(address,uint256)._bassetQuantity (masset/Masset.sol#273) is not in mixedCase
Parameter Masset.redeemTo(address,uint256,address)._basset (masset/Masset.sol#284) is not in mixedCase
Parameter Masset.redeemTo(address,uint256,address)._bassetQuantity (masset/Masset.sol#285) is not in mixedCase
Parameter Masset.redeemTo(address,uint256,address)._recipient (masset/Masset.sol#286) is not in mixedCase
Parameter Masset.redeemMulti(uint32,uint256[],address)._bassetsBitmap (masset/Masset.sol#302) is not in mixedCase
Parameter Masset.redeemMulti(uint32,uint256[],address)._bassetQuantities (masset/Masset.sol#303) is not in mixedCase
Parameter Masset.redeemMulti(uint32,uint256[],address)._recipient (masset/Masset.sol#304) is not in mixedCase
Parameter Masset.upgradeForgeValidator(address)._newForgeValidator (masset/Masset.sol#462) is not in mixedCase
Parameter Masset.setFeeRecipient(address)._feeRecipient (masset/Masset.sol#483) is not in mixedCase
Parameter Masset.setRedemptionFee(uint256)._redemptionFee (masset/Masset.sol#495) is not in mixedCase
Constant Masset.maxFee (masset/Masset.sol#51) is not in UPPER_CASE_WITH_UNDERSCORES
Parameter MockImplementationV1.initialize(address)._proxyAdmin (z_mocks/upgradability/MockImplementation.sol#15) is not in mixedCase
Parameter Nexus.initialize(bytes32[],address[],bool[],address)._keys (nexus/Nexus.sol#77) is not in mixedCase
Parameter Nexus.initialize(bytes32[],address[],bool[],address)._addresses (nexus/Nexus.sol#78) is not in mixedCase
Parameter Nexus.initialize(bytes32[],address[],bool[],address)._isLocked (nexus/Nexus.sol#79) is not in mixedCase
Parameter Nexus.initialize(bytes32[],address[],bool[],address)._governor (nexus/Nexus.sol#80) is not in mixedCase
Parameter Nexus.proposeModule(bytes32,address)._key (nexus/Nexus.sol#111) is not in mixedCase
Parameter Nexus.proposeModule(bytes32,address)._addr (nexus/Nexus.sol#111) is not in mixedCase
Parameter Nexus.cancelProposedModule(bytes32)._key (nexus/Nexus.sol#131) is not in mixedCase
Parameter Nexus.acceptProposedModule(bytes32)._key (nexus/Nexus.sol#146) is not in mixedCase
Parameter Nexus.acceptProposedModules(bytes32[])._keys (nexus/Nexus.sol#157) is not in mixedCase
Parameter Nexus.requestLockModule(bytes32)._key (nexus/Nexus.sol#209) is not in mixedCase
Parameter Nexus.cancelLockModule(bytes32)._key (nexus/Nexus.sol#225) is not in mixedCase
Parameter Nexus.lockModule(bytes32)._key (nexus/Nexus.sol#239) is not in mixedCase
Parameter Nexus.moduleExists(bytes32)._key (nexus/Nexus.sol#259) is not in mixedCase
Parameter Nexus.getModule(bytes32)._key (nexus/Nexus.sol#270) is not in mixedCase
Variable Initializable.______gap (@openzeppelin/upgrades/contracts/Initializable.sol#61) is not in mixedCase
Parameter MassetHelpers.transferTokens(address,address,address,bool,uint256)._sender (masset/shared/MassetHelpers.sol#19) is not in mixedCase
Parameter MassetHelpers.transferTokens(address,address,address,bool,uint256)._recipient (masset/shared/MassetHelpers.sol#20) is not in mixedCase
Parameter MassetHelpers.transferTokens(address,address,address,bool,uint256)._basset (masset/shared/MassetHelpers.sol#21) is not in mixedCase
Parameter MassetHelpers.transferTokens(address,address,address,bool,uint256)._isFeeCharged (masset/shared/MassetHelpers.sol#22) is not in mixedCase
Parameter MassetHelpers.transferTokens(address,address,address,bool,uint256)._qty (masset/shared/MassetHelpers.sol#23) is not in mixedCase
Parameter MassetHelpers.safeInfiniteApprove(address,address)._asset (masset/shared/MassetHelpers.sol#39) is not in mixedCase
Parameter MassetHelpers.safeInfiniteApprove(address,address)._spender (masset/shared/MassetHelpers.sol#39) is not in mixedCase
Parameter MockCompoundIntegration.logBalance(address)._bAsset (z_mocks/masset/platform-integrations/MockCompoundIntegration.sol#12) is not in mixedCase
Parameter Governable.changeGovernor(address)._newGovernor (governance/Governable.sol#52) is not in mixedCase
Constant StableMath.fullScale (shared/StableMath.sol#21) is not in UPPER_CASE_WITH_UNDERSCORES
Constant StableMath.ratioScale (shared/StableMath.sol#29) is not in UPPER_CASE_WITH_UNDERSCORES
Parameter ForgeValidator.validateMint(uint256,uint256,MassetStructs.Basset,uint256)._totalVault (masset/forge-validator/ForgeValidator.sol#32) is not in mixedCase
Parameter ForgeValidator.validateMint(uint256,uint256,MassetStructs.Basset,uint256)._grace (masset/forge-validator/ForgeValidator.sol#32) is not in mixedCase
Parameter ForgeValidator.validateMint(uint256,uint256,MassetStructs.Basset,uint256)._bAsset (masset/forge-validator/ForgeValidator.sol#32) is not in mixedCase
Parameter ForgeValidator.validateMint(uint256,uint256,MassetStructs.Basset,uint256)._bAssetQuantity (masset/forge-validator/ForgeValidator.sol#32) is not in mixedCase
Parameter ForgeValidator.validateMint(uint256,uint256,MassetStructs.Basset[],uint256[])._totalVault (masset/forge-validator/ForgeValidator.sol#65) is not in mixedCase
Parameter ForgeValidator.validateMint(uint256,uint256,MassetStructs.Basset[],uint256[])._grace (masset/forge-validator/ForgeValidator.sol#66) is not in mixedCase
Parameter ForgeValidator.validateMint(uint256,uint256,MassetStructs.Basset[],uint256[])._bAssets (masset/forge-validator/ForgeValidator.sol#67) is not in mixedCase
Parameter ForgeValidator.validateMint(uint256,uint256,MassetStructs.Basset[],uint256[])._bAssetQuantity (masset/forge-validator/ForgeValidator.sol#68) is not in mixedCase
Parameter ForgeValidator.validateRedemption(bool,uint256,MassetStructs.Basset[],uint256,uint256,uint256)._basketIsFailed (masset/forge-validator/ForgeValidator.sol#123) is not in mixedCase
Parameter ForgeValidator.validateRedemption(bool,uint256,MassetStructs.Basset[],uint256,uint256,uint256)._totalVault (masset/forge-validator/ForgeValidator.sol#124) is not in mixedCase
Parameter ForgeValidator.validateRedemption(bool,uint256,MassetStructs.Basset[],uint256,uint256,uint256)._allBassets (masset/forge-validator/ForgeValidator.sol#125) is not in mixedCase
Parameter ForgeValidator.validateRedemption(bool,uint256,MassetStructs.Basset[],uint256,uint256,uint256)._grace (masset/forge-validator/ForgeValidator.sol#126) is not in mixedCase
Parameter ForgeValidator.validateRedemption(bool,uint256,MassetStructs.Basset[],uint256,uint256,uint256)._indexToRedeem (masset/forge-validator/ForgeValidator.sol#127) is not in mixedCase
Parameter ForgeValidator.validateRedemption(bool,uint256,MassetStructs.Basset[],uint256,uint256,uint256)._bAssetQuantity (masset/forge-validator/ForgeValidator.sol#128) is not in mixedCase
Parameter ForgeValidator.validateRedemption(bool,uint256,uint256,uint8[],uint256[],MassetStructs.Basset[])._basketIsFailed (masset/forge-validator/ForgeValidator.sol#179) is not in mixedCase
Parameter ForgeValidator.validateRedemption(bool,uint256,uint256,uint8[],uint256[],MassetStructs.Basset[])._totalVault (masset/forge-validator/ForgeValidator.sol#180) is not in mixedCase
Parameter ForgeValidator.validateRedemption(bool,uint256,uint256,uint8[],uint256[],MassetStructs.Basset[])._grace (masset/forge-validator/ForgeValidator.sol#181) is not in mixedCase
Parameter ForgeValidator.validateRedemption(bool,uint256,uint256,uint8[],uint256[],MassetStructs.Basset[])._idxs (masset/forge-validator/ForgeValidator.sol#182) is not in mixedCase
Parameter ForgeValidator.validateRedemption(bool,uint256,uint256,uint8[],uint256[],MassetStructs.Basset[])._bAssetQuantities (masset/forge-validator/ForgeValidator.sol#183) is not in mixedCase
Parameter ForgeValidator.validateRedemption(bool,uint256,uint256,uint8[],uint256[],MassetStructs.Basset[])._allBassets (masset/forge-validator/ForgeValidator.sol#184) is not in mixedCase
Parameter CompoundIntegration.deposit(address,uint256,bool)._bAsset (masset/platform-integrations/CompoundIntegration.sol#32) is not in mixedCase
Parameter CompoundIntegration.deposit(address,uint256,bool)._amount (masset/platform-integrations/CompoundIntegration.sol#33) is not in mixedCase
Parameter CompoundIntegration.deposit(address,uint256,bool)._isTokenFeeCharged (masset/platform-integrations/CompoundIntegration.sol#34) is not in mixedCase
Parameter CompoundIntegration.withdraw(address,address,uint256,bool)._receiver (masset/platform-integrations/CompoundIntegration.sol#70) is not in mixedCase
Parameter CompoundIntegration.withdraw(address,address,uint256,bool)._bAsset (masset/platform-integrations/CompoundIntegration.sol#71) is not in mixedCase
Parameter CompoundIntegration.withdraw(address,address,uint256,bool)._amount (masset/platform-integrations/CompoundIntegration.sol#72) is not in mixedCase
Parameter CompoundIntegration.checkBalance(address)._bAsset (masset/platform-integrations/CompoundIntegration.sol#98) is not in mixedCase
Parameter MockInitializableModule.initialize(address)._nexus (z_mocks/shared/MockInitializableModule.sol#11) is not in mixedCase
Parameter InitializableAbstractIntegration.initialize(address,address[],address,address[],address[])._nexus (masset/platform-integrations/InitializableAbstractIntegration.sol#50) is not in mixedCase
Parameter InitializableAbstractIntegration.initialize(address,address[],address,address[],address[])._whitelisted (masset/platform-integrations/InitializableAbstractIntegration.sol#51) is not in mixedCase
Parameter InitializableAbstractIntegration.initialize(address,address[],address,address[],address[])._platformAddress (masset/platform-integrations/InitializableAbstractIntegration.sol#52) is not in mixedCase
Parameter InitializableAbstractIntegration.initialize(address,address[],address,address[],address[])._bAssets (masset/platform-integrations/InitializableAbstractIntegration.sol#53) is not in mixedCase
Parameter InitializableAbstractIntegration.initialize(address,address[],address,address[],address[])._pTokens (masset/platform-integrations/InitializableAbstractIntegration.sol#54) is not in mixedCase
Parameter InitializableAbstractIntegration.setPTokenAddress(address,address)._bAsset (masset/platform-integrations/InitializableAbstractIntegration.sol#95) is not in mixedCase
Parameter InitializableAbstractIntegration.setPTokenAddress(address,address)._pToken (masset/platform-integrations/InitializableAbstractIntegration.sol#95) is not in mixedCase
Parameter MockAToken.redeem(uint256)._amount (z_mocks/masset/platform-integrations/MockAave.sol#30) is not in mixedCase
Parameter MockAave.addAToken(address,address)._aToken (z_mocks/masset/platform-integrations/MockAave.sol#44) is not in mixedCase
Parameter MockAave.addAToken(address,address)._underlying (z_mocks/masset/platform-integrations/MockAave.sol#44) is not in mixedCase
Parameter MockAave.deposit(address,uint256,uint16)._reserve (z_mocks/masset/platform-integrations/MockAave.sol#49) is not in mixedCase
Parameter MockAave.deposit(address,uint256,uint16)._amount (z_mocks/masset/platform-integrations/MockAave.sol#49) is not in mixedCase
Parameter MockAaveIntegration.logBalance(address)._bAsset (z_mocks/masset/platform-integrations/MockAave.sol#77) is not in mixedCase
Variable InitializableModuleKeys.Key_Governance (shared/InitializableModuleKeys.sol#13) is not in mixedCase
Variable InitializableModuleKeys.Key_Staking (shared/InitializableModuleKeys.sol#14) is not in mixedCase
Variable InitializableModuleKeys.Key_ProxyAdmin (shared/InitializableModuleKeys.sol#15) is not in mixedCase
Variable InitializableModuleKeys.Key_OracleHub (shared/InitializableModuleKeys.sol#18) is not in mixedCase
Variable InitializableModuleKeys.Key_Manager (shared/InitializableModuleKeys.sol#19) is not in mixedCase
Variable InitializableModuleKeys.Key_Recollateraliser (shared/InitializableModuleKeys.sol#20) is not in mixedCase
Variable InitializableModuleKeys.Key_MetaToken (shared/InitializableModuleKeys.sol#21) is not in mixedCase
Variable InitializableModuleKeys.Key_SavingsManager (shared/InitializableModuleKeys.sol#22) is not in mixedCase
Parameter AaveIntegration.deposit(address,uint256,bool)._bAsset (masset/platform-integrations/AaveIntegration.sol#30) is not in mixedCase
Parameter AaveIntegration.deposit(address,uint256,bool)._amount (masset/platform-integrations/AaveIntegration.sol#31) is not in mixedCase
Parameter AaveIntegration.deposit(address,uint256,bool)._isTokenFeeCharged (masset/platform-integrations/AaveIntegration.sol#32) is not in mixedCase
Parameter AaveIntegration.withdraw(address,address,uint256,bool)._receiver (masset/platform-integrations/AaveIntegration.sol#69) is not in mixedCase
Parameter AaveIntegration.withdraw(address,address,uint256,bool)._bAsset (masset/platform-integrations/AaveIntegration.sol#70) is not in mixedCase
Parameter AaveIntegration.withdraw(address,address,uint256,bool)._amount (masset/platform-integrations/AaveIntegration.sol#71) is not in mixedCase
Parameter AaveIntegration.withdraw(address,address,uint256,bool)._isTokenFeeCharged (masset/platform-integrations/AaveIntegration.sol#72) is not in mixedCase
Parameter AaveIntegration.checkBalance(address)._bAsset (masset/platform-integrations/AaveIntegration.sol#107) is not in mixedCase
Parameter MockCommonHelpers.getDecimals(address)._token (z_mocks/shared/MockCommonHelpers.sol#7) is not in mixedCase
Parameter ClaimableGovernor.requestGovernorChange(address)._proposedGovernor (governance/ClaimableGovernor.sol#39) is not in mixedCase
Parameter Migrations.upgrade(address).new_address (Migrations.sol#19) is not in mixedCase
Variable Migrations.last_completed_migration (Migrations.sol#5) is not in mixedCase
Constant ModuleKeys.Key_Governance (shared/ModuleKeys.sol#13) is not in UPPER_CASE_WITH_UNDERSCORES
Constant ModuleKeys.Key_Staking (shared/ModuleKeys.sol#14) is not in UPPER_CASE_WITH_UNDERSCORES
Constant ModuleKeys.Key_ProxyAdmin (shared/ModuleKeys.sol#15) is not in UPPER_CASE_WITH_UNDERSCORES
Constant ModuleKeys.Key_OracleHub (shared/ModuleKeys.sol#18) is not in UPPER_CASE_WITH_UNDERSCORES
Constant ModuleKeys.Key_Manager (shared/ModuleKeys.sol#19) is not in UPPER_CASE_WITH_UNDERSCORES
Constant ModuleKeys.Key_Recollateraliser (shared/ModuleKeys.sol#20) is not in UPPER_CASE_WITH_UNDERSCORES
Constant ModuleKeys.Key_MetaToken (shared/ModuleKeys.sol#21) is not in UPPER_CASE_WITH_UNDERSCORES
Constant ModuleKeys.Key_SavingsManager (shared/ModuleKeys.sol#22) is not in UPPER_CASE_WITH_UNDERSCORES
Parameter DelayedClaimableGovernor.requestGovernorChange(address)._proposedGovernor (governance/DelayedClaimableGovernor.sol#38) is not in mixedCase
Parameter InitializableUpgradeabilityProxy.initialize(address,bytes)._logic (@openzeppelin/upgrades/contracts/upgradeability/InitializableUpgradeabilityProxy.sol#19) is not in mixedCase
Parameter InitializableUpgradeabilityProxy.initialize(address,bytes)._data (@openzeppelin/upgrades/contracts/upgradeability/InitializableUpgradeabilityProxy.sol#19) is not in mixedCase
Parameter MockNexus.setProxyAdmin(address)._proxyAdmin (z_mocks/nexus/MockNexus.sol#33) is not in mixedCase
Parameter DelayedProxyAdmin.proposeUpgrade(address,address,bytes)._proxy (upgradability/DelayedProxyAdmin.sol#52) is not in mixedCase
Parameter DelayedProxyAdmin.proposeUpgrade(address,address,bytes)._implementation (upgradability/DelayedProxyAdmin.sol#53) is not in mixedCase
Parameter DelayedProxyAdmin.proposeUpgrade(address,address,bytes)._data (upgradability/DelayedProxyAdmin.sol#54) is not in mixedCase
Parameter DelayedProxyAdmin.cancelUpgrade(address)._proxy (upgradability/DelayedProxyAdmin.sol#76) is not in mixedCase
Parameter DelayedProxyAdmin.acceptUpgradeRequest(address)._proxy (upgradability/DelayedProxyAdmin.sol#88) is not in mixedCase
Parameter DelayedProxyAdmin.validateProxy(address,address)._proxy (upgradability/DelayedProxyAdmin.sol#126) is not in mixedCase
Parameter DelayedProxyAdmin.validateProxy(address,address)._newImpl (upgradability/DelayedProxyAdmin.sol#126) is not in mixedCase
Parameter DelayedProxyAdmin.getProxyAdmin(address)._proxy (upgradability/DelayedProxyAdmin.sol#143) is not in mixedCase
Parameter DelayedProxyAdmin.getProxyImplementation(address)._proxy (upgradability/DelayedProxyAdmin.sol#157) is not in mixedCase
Parameter InitializableAdminUpgradeabilityProxy.initialize(address,address,bytes)._logic (@openzeppelin/upgrades/contracts/upgradeability/InitializableAdminUpgradeabilityProxy.sol#21) is not in mixedCase
Parameter InitializableAdminUpgradeabilityProxy.initialize(address,address,bytes)._admin (@openzeppelin/upgrades/contracts/upgradeability/InitializableAdminUpgradeabilityProxy.sol#21) is not in mixedCase
Parameter InitializableAdminUpgradeabilityProxy.initialize(address,address,bytes)._data (@openzeppelin/upgrades/contracts/upgradeability/InitializableAdminUpgradeabilityProxy.sol#21) is not in mixedCase
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#conformance-to-solidity-naming-conventions[0m
INFO:Detectors:[92m
Initializable.______gap (@openzeppelin/upgrades/contracts/Initializable.sol#61) is never used in BasketManager (masset/BasketManager.sol#25-640)
IBasketManager.version_intf (interfaces/IBasketManager.sol#13) is never used in BasketManager (masset/BasketManager.sol#25-640)
Initializable.______gap (@openzeppelin/upgrades/contracts/Initializable.sol#61) is never used in AaveIntegrationV2 (z_mocks/masset/platform-integrations/MockUpgradedAaveIntegration.sol#7-173)
Initializable.______gap (@openzeppelin/upgrades/contracts/Initializable.sol#61) is never used in AaveIntegrationV3 (z_mocks/masset/platform-integrations/MockUpgradedAaveIntegration.sol#175-354)
Initializable.______gap (@openzeppelin/upgrades/contracts/Initializable.sol#61) is never used in MockImplementationV1 (z_mocks/upgradability/MockImplementation.sol#5-21)
Initializable.______gap (@openzeppelin/upgrades/contracts/Initializable.sol#61) is never used in MockImplementationV2 (z_mocks/upgradability/MockImplementation.sol#23-38)
Initializable.______gap (@openzeppelin/upgrades/contracts/Initializable.sol#61) is never used in MockImplementationV3 (z_mocks/upgradability/MockImplementation.sol#40-55)
Initializable.______gap (@openzeppelin/upgrades/contracts/Initializable.sol#61) is never used in MockCompoundIntegration (z_mocks/masset/platform-integrations/MockCompoundIntegration.sol#7-22)
Initializable.______gap (@openzeppelin/upgrades/contracts/Initializable.sol#61) is never used in MockInitializableModule (z_mocks/shared/MockInitializableModule.sol#6-70)
Initializable.______gap (@openzeppelin/upgrades/contracts/Initializable.sol#61) is never used in MockAaveIntegration (z_mocks/masset/platform-integrations/MockAave.sol#72-96)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#unused-state-variables[0m
INFO:Detectors:[92m
MockImplementationV2.proxyAdmin (z_mocks/upgradability/MockImplementation.sol#26) should be constant
MockImplementationV3.proxyAdmin (z_mocks/upgradability/MockImplementation.sol#43) should be constant
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#state-variables-that-could-be-declared-constant[0m
INFO:Detectors:[92m
initialize(address,address,uint256,address[],address[],uint256[],bool[]) should be declared external:
	- BasketManager.initialize(address,address,uint256,address[],address[],uint256[],bool[]) (masset/BasketManager.sol#51-82)
initializeNewUint() should be declared external:
	- AaveIntegrationV2.initializeNewUint() (z_mocks/masset/platform-integrations/MockUpgradedAaveIntegration.sol#154-156)
newMethod() should be declared external:
	- AaveIntegrationV2.newMethod() (z_mocks/masset/platform-integrations/MockUpgradedAaveIntegration.sol#158-160)
initializeNewUint() should be declared external:
	- AaveIntegrationV3.initializeNewUint() (z_mocks/masset/platform-integrations/MockUpgradedAaveIntegration.sol#332-334)
name() should be declared external:
	- ERC20WithFee.name() (z_mocks/shared/MockERC20WithFee.sol#64-66)
symbol() should be declared external:
	- ERC20WithFee.symbol() (z_mocks/shared/MockERC20WithFee.sol#72-74)
decimals() should be declared external:
	- ERC20WithFee.decimals() (z_mocks/shared/MockERC20WithFee.sol#88-90)
balanceOf(address) should be declared external:
	- ERC20WithFee.balanceOf(address) (z_mocks/shared/MockERC20WithFee.sol#102-104)
	- ERC20.balanceOf(address) (openzeppelin-solidity/contracts/token/ERC20/ERC20.sol#48-50)
transfer(address,uint256) should be declared external:
	- ERC20WithFee.transfer(address,uint256) (z_mocks/shared/MockERC20WithFee.sol#114-117)
	- ERC20.transfer(address,uint256) (openzeppelin-solidity/contracts/token/ERC20/ERC20.sol#60-63)
allowance(address,address) should be declared external:
	- ERC20WithFee.allowance(address,address) (z_mocks/shared/MockERC20WithFee.sol#122-124)
	- ERC20.allowance(address,address) (openzeppelin-solidity/contracts/token/ERC20/ERC20.sol#68-70)
approve(address,uint256) should be declared external:
	- ERC20WithFee.approve(address,uint256) (z_mocks/shared/MockERC20WithFee.sol#133-136)
	- ERC20.approve(address,uint256) (openzeppelin-solidity/contracts/token/ERC20/ERC20.sol#79-82)
transferFrom(address,address,uint256) should be declared external:
	- ERC20.transferFrom(address,address,uint256) (openzeppelin-solidity/contracts/token/ERC20/ERC20.sol#96-100)
	- ERC20WithFee.transferFrom(address,address,uint256) (z_mocks/shared/MockERC20WithFee.sol#150-154)
increaseAllowance(address,uint256) should be declared external:
	- ERC20WithFee.increaseAllowance(address,uint256) (z_mocks/shared/MockERC20WithFee.sol#168-171)
decreaseAllowance(address,uint256) should be declared external:
	- ERC20WithFee.decreaseAllowance(address,uint256) (z_mocks/shared/MockERC20WithFee.sol#187-190)
mint(address,uint256) should be declared external:
	- ERC20WithFee.mint(address,uint256) (z_mocks/shared/MockERC20WithFee.sol#295-298)
setParams(uint256,uint256) should be declared external:
	- MockUSDT.setParams(uint256,uint256) (z_mocks/shared/MockERC20.sol#29)
initialize(address) should be declared external:
	- MockImplementationV1.initialize(address) (z_mocks/upgradability/MockImplementation.sol#15-20)
initializeV2() should be declared external:
	- MockImplementationV2.initializeV2() (z_mocks/upgradability/MockImplementation.sol#33-37)
initializeV3() should be declared external:
	- MockImplementationV3.initializeV3() (z_mocks/upgradability/MockImplementation.sol#50-54)
getModule(bytes32) should be declared external:
	- Nexus.getModule(bytes32) (nexus/Nexus.sol#270-272)
changeGovernor(address) should be declared external:
	- ClaimableGovernor.changeGovernor(address) (governance/ClaimableGovernor.sol#31-33)
	- Governable.changeGovernor(address) (governance/Governable.sol#52-54)
mint(address,uint256) should be declared external:
	- ERC20Mintable.mint(address,uint256) (openzeppelin-solidity/contracts/token/ERC20/ERC20Mintable.sol#20-23)
getFullScale() should be declared external:
	- PublicStableMath.getFullScale() (z_mocks/shared/PublicStableMath.sol#9-15)
getRatioScale() should be declared external:
	- PublicStableMath.getRatioScale() (z_mocks/shared/PublicStableMath.sol#17-23)
scaleInteger(uint256) should be declared external:
	- PublicStableMath.scaleInteger(uint256) (z_mocks/shared/PublicStableMath.sol#25-31)
mulTruncateScale(uint256,uint256,uint256) should be declared external:
	- PublicStableMath.mulTruncateScale(uint256,uint256,uint256) (z_mocks/shared/PublicStableMath.sol#33-39)
mulTruncate(uint256,uint256) should be declared external:
	- PublicStableMath.mulTruncate(uint256,uint256) (z_mocks/shared/PublicStableMath.sol#41-47)
mulTruncateCeil(uint256,uint256) should be declared external:
	- PublicStableMath.mulTruncateCeil(uint256,uint256) (z_mocks/shared/PublicStableMath.sol#49-55)
divPrecisely(uint256,uint256) should be declared external:
	- PublicStableMath.divPrecisely(uint256,uint256) (z_mocks/shared/PublicStableMath.sol#57-63)
mulRatioTruncate(uint256,uint256) should be declared external:
	- PublicStableMath.mulRatioTruncate(uint256,uint256) (z_mocks/shared/PublicStableMath.sol#65-71)
mulRatioTruncateCeil(uint256,uint256) should be declared external:
	- PublicStableMath.mulRatioTruncateCeil(uint256,uint256) (z_mocks/shared/PublicStableMath.sol#73-79)
divRatioPrecisely(uint256,uint256) should be declared external:
	- PublicStableMath.divRatioPrecisely(uint256,uint256) (z_mocks/shared/PublicStableMath.sol#81-87)
min(uint256,uint256) should be declared external:
	- PublicStableMath.min(uint256,uint256) (z_mocks/shared/PublicStableMath.sol#89-95)
max(uint256,uint256) should be declared external:
	- PublicStableMath.max(uint256,uint256) (z_mocks/shared/PublicStableMath.sol#97-103)
clamp(uint256,uint256) should be declared external:
	- PublicStableMath.clamp(uint256,uint256) (z_mocks/shared/PublicStableMath.sol#105-111)
initialize(address) should be declared external:
	- MockInitializableModule.initialize(address) (z_mocks/shared/MockInitializableModule.sol#10-17)
governor() should be declared external:
	- MockInitializableModule.governor() (z_mocks/shared/MockInitializableModule.sol#19-21)
governance() should be declared external:
	- MockInitializableModule.governance() (z_mocks/shared/MockInitializableModule.sol#23-25)
proxyAdmin() should be declared external:
	- MockInitializableModule.proxyAdmin() (z_mocks/shared/MockInitializableModule.sol#27-29)
staking() should be declared external:
	- MockInitializableModule.staking() (z_mocks/shared/MockInitializableModule.sol#31-33)
metaToken() should be declared external:
	- MockInitializableModule.metaToken() (z_mocks/shared/MockInitializableModule.sol#35-37)
oracleHub() should be declared external:
	- MockInitializableModule.oracleHub() (z_mocks/shared/MockInitializableModule.sol#39-41)
manager() should be declared external:
	- MockInitializableModule.manager() (z_mocks/shared/MockInitializableModule.sol#43-45)
savingsManager() should be declared external:
	- MockInitializableModule.savingsManager() (z_mocks/shared/MockInitializableModule.sol#47-49)
recollateraliser() should be declared external:
	- MockInitializableModule.recollateraliser() (z_mocks/shared/MockInitializableModule.sol#51-53)
shouldAllowOnlyGovernor() should be declared external:
	- MockInitializableModule.shouldAllowOnlyGovernor() (z_mocks/shared/MockInitializableModule.sol#55-57)
shouldAllowOnlyGovernance() should be declared external:
	- MockInitializableModule.shouldAllowOnlyGovernance() (z_mocks/shared/MockInitializableModule.sol#59-61)
shouldAllowOnlyManager() should be declared external:
	- MockInitializableModule.shouldAllowOnlyManager() (z_mocks/shared/MockInitializableModule.sol#63-65)
shouldAllowOnlyProxyAdmin() should be declared external:
	- MockInitializableModule.shouldAllowOnlyProxyAdmin() (z_mocks/shared/MockInitializableModule.sol#67-69)
initialize(address,address[],address,address[],address[]) should be declared external:
	- InitializableAbstractIntegration.initialize(address,address[],address,address[],address[]) (masset/platform-integrations/InitializableAbstractIntegration.sol#49-61)
addAToken(address,address) should be declared external:
	- MockAave.addAToken(address,address) (z_mocks/masset/platform-integrations/MockAave.sol#44-47)
renounceMinter() should be declared external:
	- MinterRole.renounceMinter() (openzeppelin-solidity/contracts/access/roles/MinterRole.sol#30-32)
getDecimals(address) should be declared external:
	- MockCommonHelpers.getDecimals(address) (z_mocks/shared/MockCommonHelpers.sol#7-12)
governor() should be declared external:
	- MockModule.governor() (z_mocks/shared/MockModule.sol#11-13)
governance() should be declared external:
	- MockModule.governance() (z_mocks/shared/MockModule.sol#15-17)
staking() should be declared external:
	- MockModule.staking() (z_mocks/shared/MockModule.sol#19-21)
metaToken() should be declared external:
	- MockModule.metaToken() (z_mocks/shared/MockModule.sol#23-25)
oracleHub() should be declared external:
	- MockModule.oracleHub() (z_mocks/shared/MockModule.sol#27-29)
manager() should be declared external:
	- MockModule.manager() (z_mocks/shared/MockModule.sol#31-33)
savingsManager() should be declared external:
	- MockModule.savingsManager() (z_mocks/shared/MockModule.sol#35-37)
recollateraliser() should be declared external:
	- MockModule.recollateraliser() (z_mocks/shared/MockModule.sol#39-41)
proxyAdmin() should be declared external:
	- MockModule.proxyAdmin() (z_mocks/shared/MockModule.sol#43-45)
shouldAllowOnlyGovernor() should be declared external:
	- MockModule.shouldAllowOnlyGovernor() (z_mocks/shared/MockModule.sol#47-49)
shouldAllowOnlyGovernance() should be declared external:
	- MockModule.shouldAllowOnlyGovernance() (z_mocks/shared/MockModule.sol#51-53)
shouldAllowOnlyManager() should be declared external:
	- MockModule.shouldAllowOnlyManager() (z_mocks/shared/MockModule.sol#55-57)
shouldAllowOnlyProxyAdmin() should be declared external:
	- MockModule.shouldAllowOnlyProxyAdmin() (z_mocks/shared/MockModule.sol#59-61)
name() should be declared external:
	- ERC20Detailed.name() (openzeppelin-solidity/contracts/token/ERC20/ERC20Detailed.sol#27-29)
symbol() should be declared external:
	- ERC20Detailed.symbol() (openzeppelin-solidity/contracts/token/ERC20/ERC20Detailed.sol#35-37)
decimals() should be declared external:
	- ERC20Detailed.decimals() (openzeppelin-solidity/contracts/token/ERC20/ERC20Detailed.sol#51-53)
setCompleted(uint256) should be declared external:
	- Migrations.setCompleted(uint256) (Migrations.sol#15-17)
upgrade(address) should be declared external:
	- Migrations.upgrade(address) (Migrations.sol#19-22)
paused() should be declared external:
	- PausableModule.paused() (shared/PausableModule.sol#53-55)
pause() should be declared external:
	- PausableModule.pause() (shared/PausableModule.sol#60-63)
unpause() should be declared external:
	- PausableModule.unpause() (shared/PausableModule.sol#68-71)
increaseAllowance(address,uint256) should be declared external:
	- ERC20.increaseAllowance(address,uint256) (openzeppelin-solidity/contracts/token/ERC20/ERC20.sol#114-117)
decreaseAllowance(address,uint256) should be declared external:
	- ERC20.decreaseAllowance(address,uint256) (openzeppelin-solidity/contracts/token/ERC20/ERC20.sol#133-136)
setProxyAdmin(address) should be declared external:
	- MockNexus.setProxyAdmin(address) (z_mocks/nexus/MockNexus.sol#33-35)
initialize(address,address,bytes) should be declared external:
	- InitializableAdminUpgradeabilityProxy.initialize(address,address,bytes) (@openzeppelin/upgrades/contracts/upgradeability/InitializableAdminUpgradeabilityProxy.sol#21-26)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#public-function-that-could-be-declared-as-external[0m
INFO:Slither:. analyzed (78 contracts with 46 detectors), 439 result(s) found
INFO:Slither:[94mUse https://crytic.io/ to get access to additional detectors and Github integration[0m
