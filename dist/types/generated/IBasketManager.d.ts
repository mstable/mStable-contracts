/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface IBasketManagerInterface extends ethers.utils.Interface {
  functions: {
    "getBasket()": FunctionFragment;
    "getBassetIntegrator(address)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "getBasket", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getBassetIntegrator",
    values: [string]
  ): string;

  decodeFunctionResult(functionFragment: "getBasket", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getBassetIntegrator",
    data: BytesLike
  ): Result;

  events: {};
}

export class IBasketManager extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: IBasketManagerInterface;

  functions: {
    getBasket(
      overrides?: CallOverrides
    ): Promise<
      [
        [
          ([string, number, boolean, BigNumber, BigNumber, BigNumber] & {
            addr: string;
            status: number;
            isTransferFeeCharged: boolean;
            ratio: BigNumber;
            maxWeight: BigNumber;
            vaultBalance: BigNumber;
          })[],
          number,
          boolean,
          boolean,
          BigNumber
        ] & {
          bassets: ([
            string,
            number,
            boolean,
            BigNumber,
            BigNumber,
            BigNumber
          ] & {
            addr: string;
            status: number;
            isTransferFeeCharged: boolean;
            ratio: BigNumber;
            maxWeight: BigNumber;
            vaultBalance: BigNumber;
          })[];
          maxBassets: number;
          undergoingRecol: boolean;
          failed: boolean;
          collateralisationRatio: BigNumber;
        }
      ] & {
        b: [
          ([string, number, boolean, BigNumber, BigNumber, BigNumber] & {
            addr: string;
            status: number;
            isTransferFeeCharged: boolean;
            ratio: BigNumber;
            maxWeight: BigNumber;
            vaultBalance: BigNumber;
          })[],
          number,
          boolean,
          boolean,
          BigNumber
        ] & {
          bassets: ([
            string,
            number,
            boolean,
            BigNumber,
            BigNumber,
            BigNumber
          ] & {
            addr: string;
            status: number;
            isTransferFeeCharged: boolean;
            ratio: BigNumber;
            maxWeight: BigNumber;
            vaultBalance: BigNumber;
          })[];
          maxBassets: number;
          undergoingRecol: boolean;
          failed: boolean;
          collateralisationRatio: BigNumber;
        };
      }
    >;

    getBassetIntegrator(
      _bAsset: string,
      overrides?: CallOverrides
    ): Promise<[string] & { integrator: string }>;
  };

  getBasket(
    overrides?: CallOverrides
  ): Promise<
    [
      ([string, number, boolean, BigNumber, BigNumber, BigNumber] & {
        addr: string;
        status: number;
        isTransferFeeCharged: boolean;
        ratio: BigNumber;
        maxWeight: BigNumber;
        vaultBalance: BigNumber;
      })[],
      number,
      boolean,
      boolean,
      BigNumber
    ] & {
      bassets: ([string, number, boolean, BigNumber, BigNumber, BigNumber] & {
        addr: string;
        status: number;
        isTransferFeeCharged: boolean;
        ratio: BigNumber;
        maxWeight: BigNumber;
        vaultBalance: BigNumber;
      })[];
      maxBassets: number;
      undergoingRecol: boolean;
      failed: boolean;
      collateralisationRatio: BigNumber;
    }
  >;

  getBassetIntegrator(
    _bAsset: string,
    overrides?: CallOverrides
  ): Promise<string>;

  callStatic: {
    getBasket(
      overrides?: CallOverrides
    ): Promise<
      [
        ([string, number, boolean, BigNumber, BigNumber, BigNumber] & {
          addr: string;
          status: number;
          isTransferFeeCharged: boolean;
          ratio: BigNumber;
          maxWeight: BigNumber;
          vaultBalance: BigNumber;
        })[],
        number,
        boolean,
        boolean,
        BigNumber
      ] & {
        bassets: ([string, number, boolean, BigNumber, BigNumber, BigNumber] & {
          addr: string;
          status: number;
          isTransferFeeCharged: boolean;
          ratio: BigNumber;
          maxWeight: BigNumber;
          vaultBalance: BigNumber;
        })[];
        maxBassets: number;
        undergoingRecol: boolean;
        failed: boolean;
        collateralisationRatio: BigNumber;
      }
    >;

    getBassetIntegrator(
      _bAsset: string,
      overrides?: CallOverrides
    ): Promise<string>;
  };

  filters: {};

  estimateGas: {
    getBasket(overrides?: CallOverrides): Promise<BigNumber>;

    getBassetIntegrator(
      _bAsset: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    getBasket(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getBassetIntegrator(
      _bAsset: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
