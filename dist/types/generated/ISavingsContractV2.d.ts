/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface ISavingsContractV2Interface extends ethers.utils.Interface {
  functions: {
    "balanceOfUnderlying(address)": FunctionFragment;
    "creditBalances(address)": FunctionFragment;
    "creditsToUnderlying(uint256)": FunctionFragment;
    "depositInterest(uint256)": FunctionFragment;
    "depositSavings(uint256,address)": FunctionFragment;
    "exchangeRate()": FunctionFragment;
    "redeem(uint256)": FunctionFragment;
    "redeemCredits(uint256)": FunctionFragment;
    "redeemUnderlying(uint256)": FunctionFragment;
    "underlying()": FunctionFragment;
    "underlyingToCredits(uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "balanceOfUnderlying",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "creditBalances",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "creditsToUnderlying",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "depositInterest",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "depositSavings",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "exchangeRate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "redeem",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "redeemCredits",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "redeemUnderlying",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "underlying",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "underlyingToCredits",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "balanceOfUnderlying",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "creditBalances",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "creditsToUnderlying",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositInterest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositSavings",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "exchangeRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "redeem", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "redeemCredits",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "redeemUnderlying",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "underlying", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "underlyingToCredits",
    data: BytesLike
  ): Result;

  events: {};
}

export class ISavingsContractV2 extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: ISavingsContractV2Interface;

  functions: {
    balanceOfUnderlying(
      _user: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { underlying: BigNumber }>;

    creditBalances(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    creditsToUnderlying(
      _credits: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { underlying: BigNumber }>;

    depositInterest(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "depositSavings(uint256,address)"(
      _amount: BigNumberish,
      _beneficiary: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "depositSavings(uint256)"(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    exchangeRate(overrides?: CallOverrides): Promise<[BigNumber]>;

    redeem(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    redeemCredits(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    redeemUnderlying(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    underlying(
      overrides?: CallOverrides
    ): Promise<[string] & { underlyingMasset: string }>;

    underlyingToCredits(
      _underlying: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { credits: BigNumber }>;
  };

  balanceOfUnderlying(
    _user: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  creditBalances(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  creditsToUnderlying(
    _credits: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  depositInterest(
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "depositSavings(uint256,address)"(
    _amount: BigNumberish,
    _beneficiary: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "depositSavings(uint256)"(
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  exchangeRate(overrides?: CallOverrides): Promise<BigNumber>;

  redeem(
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  redeemCredits(
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  redeemUnderlying(
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  underlying(overrides?: CallOverrides): Promise<string>;

  underlyingToCredits(
    _underlying: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  callStatic: {
    balanceOfUnderlying(
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    creditBalances(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    creditsToUnderlying(
      _credits: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    depositInterest(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "depositSavings(uint256,address)"(
      _amount: BigNumberish,
      _beneficiary: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "depositSavings(uint256)"(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    exchangeRate(overrides?: CallOverrides): Promise<BigNumber>;

    redeem(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    redeemCredits(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    redeemUnderlying(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    underlying(overrides?: CallOverrides): Promise<string>;

    underlyingToCredits(
      _underlying: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {};

  estimateGas: {
    balanceOfUnderlying(
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    creditBalances(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    creditsToUnderlying(
      _credits: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    depositInterest(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "depositSavings(uint256,address)"(
      _amount: BigNumberish,
      _beneficiary: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "depositSavings(uint256)"(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    exchangeRate(overrides?: CallOverrides): Promise<BigNumber>;

    redeem(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    redeemCredits(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    redeemUnderlying(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    underlying(overrides?: CallOverrides): Promise<BigNumber>;

    underlyingToCredits(
      _underlying: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    balanceOfUnderlying(
      _user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    creditBalances(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    creditsToUnderlying(
      _credits: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    depositInterest(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "depositSavings(uint256,address)"(
      _amount: BigNumberish,
      _beneficiary: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "depositSavings(uint256)"(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    exchangeRate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    redeem(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    redeemCredits(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    redeemUnderlying(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    underlying(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    underlyingToCredits(
      _underlying: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
