/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface DelayedProxyAdminInterface extends ethers.utils.Interface {
  functions: {
    "UPGRADE_DELAY()": FunctionFragment;
    "acceptUpgradeRequest(address)": FunctionFragment;
    "cancelUpgrade(address)": FunctionFragment;
    "getProxyAdmin(address)": FunctionFragment;
    "getProxyImplementation(address)": FunctionFragment;
    "nexus()": FunctionFragment;
    "proposeUpgrade(address,address,bytes)": FunctionFragment;
    "requests(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "UPGRADE_DELAY",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "acceptUpgradeRequest",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelUpgrade",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getProxyAdmin",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getProxyImplementation",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "nexus", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "proposeUpgrade",
    values: [string, string, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "requests", values: [string]): string;

  decodeFunctionResult(
    functionFragment: "UPGRADE_DELAY",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "acceptUpgradeRequest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cancelUpgrade",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getProxyAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getProxyImplementation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "nexus", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "proposeUpgrade",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "requests", data: BytesLike): Result;

  events: {
    "UpgradeCancelled(address)": EventFragment;
    "UpgradeProposed(address,address,bytes)": EventFragment;
    "Upgraded(address,address,address,bytes)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "UpgradeCancelled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpgradeProposed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Upgraded"): EventFragment;
}

export class DelayedProxyAdmin extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: DelayedProxyAdminInterface;

  functions: {
    UPGRADE_DELAY(overrides?: CallOverrides): Promise<[BigNumber]>;

    acceptUpgradeRequest(
      _proxy: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    cancelUpgrade(
      _proxy: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getProxyAdmin(_proxy: string, overrides?: CallOverrides): Promise<[string]>;

    getProxyImplementation(
      _proxy: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    nexus(overrides?: CallOverrides): Promise<[string]>;

    proposeUpgrade(
      _proxy: string,
      _implementation: string,
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    requests(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [string, string, BigNumber] & {
        implementation: string;
        data: string;
        timestamp: BigNumber;
      }
    >;
  };

  UPGRADE_DELAY(overrides?: CallOverrides): Promise<BigNumber>;

  acceptUpgradeRequest(
    _proxy: string,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  cancelUpgrade(
    _proxy: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getProxyAdmin(_proxy: string, overrides?: CallOverrides): Promise<string>;

  getProxyImplementation(
    _proxy: string,
    overrides?: CallOverrides
  ): Promise<string>;

  nexus(overrides?: CallOverrides): Promise<string>;

  proposeUpgrade(
    _proxy: string,
    _implementation: string,
    _data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  requests(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [string, string, BigNumber] & {
      implementation: string;
      data: string;
      timestamp: BigNumber;
    }
  >;

  callStatic: {
    UPGRADE_DELAY(overrides?: CallOverrides): Promise<BigNumber>;

    acceptUpgradeRequest(
      _proxy: string,
      overrides?: CallOverrides
    ): Promise<void>;

    cancelUpgrade(_proxy: string, overrides?: CallOverrides): Promise<void>;

    getProxyAdmin(_proxy: string, overrides?: CallOverrides): Promise<string>;

    getProxyImplementation(
      _proxy: string,
      overrides?: CallOverrides
    ): Promise<string>;

    nexus(overrides?: CallOverrides): Promise<string>;

    proposeUpgrade(
      _proxy: string,
      _implementation: string,
      _data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    requests(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [string, string, BigNumber] & {
        implementation: string;
        data: string;
        timestamp: BigNumber;
      }
    >;
  };

  filters: {
    UpgradeCancelled(
      proxy?: string | null
    ): TypedEventFilter<[string], { proxy: string }>;

    UpgradeProposed(
      proxy?: string | null,
      implementation?: null,
      data?: null
    ): TypedEventFilter<
      [string, string, string],
      { proxy: string; implementation: string; data: string }
    >;

    Upgraded(
      proxy?: string | null,
      oldImpl?: null,
      newImpl?: null,
      data?: null
    ): TypedEventFilter<
      [string, string, string, string],
      { proxy: string; oldImpl: string; newImpl: string; data: string }
    >;
  };

  estimateGas: {
    UPGRADE_DELAY(overrides?: CallOverrides): Promise<BigNumber>;

    acceptUpgradeRequest(
      _proxy: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    cancelUpgrade(
      _proxy: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getProxyAdmin(
      _proxy: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getProxyImplementation(
      _proxy: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    nexus(overrides?: CallOverrides): Promise<BigNumber>;

    proposeUpgrade(
      _proxy: string,
      _implementation: string,
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    requests(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    UPGRADE_DELAY(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    acceptUpgradeRequest(
      _proxy: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    cancelUpgrade(
      _proxy: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getProxyAdmin(
      _proxy: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getProxyImplementation(
      _proxy: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    nexus(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    proposeUpgrade(
      _proxy: string,
      _implementation: string,
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    requests(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
