/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface SavingsManagerInterface extends ethers.utils.Interface {
  functions: {
    "addSavingsContract(address,address)": FunctionFragment;
    "collectAndDistributeInterest(address)": FunctionFragment;
    "collectAndStreamInterest(address)": FunctionFragment;
    "depositLiquidation(address,uint256)": FunctionFragment;
    "distributeUnallocatedInterest(address)": FunctionFragment;
    "freezeStreams()": FunctionFragment;
    "lastBatchCollected(address)": FunctionFragment;
    "lastCollection(address)": FunctionFragment;
    "lastPeriodStart(address)": FunctionFragment;
    "liqStream(address)": FunctionFragment;
    "nexus()": FunctionFragment;
    "pause()": FunctionFragment;
    "paused()": FunctionFragment;
    "periodYield(address)": FunctionFragment;
    "revenueRecipients(address)": FunctionFragment;
    "savingsContracts(address)": FunctionFragment;
    "setRevenueRecipient(address,address)": FunctionFragment;
    "setSavingsRate(uint256)": FunctionFragment;
    "unpause()": FunctionFragment;
    "updateSavingsContract(address,address)": FunctionFragment;
    "yieldStream(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "addSavingsContract",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "collectAndDistributeInterest",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "collectAndStreamInterest",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "depositLiquidation",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "distributeUnallocatedInterest",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "freezeStreams",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lastBatchCollected",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "lastCollection",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "lastPeriodStart",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "liqStream", values: [string]): string;
  encodeFunctionData(functionFragment: "nexus", values?: undefined): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(functionFragment: "periodYield", values: [string]): string;
  encodeFunctionData(
    functionFragment: "revenueRecipients",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "savingsContracts",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setRevenueRecipient",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setSavingsRate",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "updateSavingsContract",
    values: [string, string]
  ): string;
  encodeFunctionData(functionFragment: "yieldStream", values: [string]): string;

  decodeFunctionResult(
    functionFragment: "addSavingsContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "collectAndDistributeInterest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "collectAndStreamInterest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositLiquidation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "distributeUnallocatedInterest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "freezeStreams",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lastBatchCollected",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lastCollection",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lastPeriodStart",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "liqStream", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "nexus", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "periodYield",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revenueRecipients",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "savingsContracts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRevenueRecipient",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSavingsRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateSavingsContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "yieldStream",
    data: BytesLike
  ): Result;

  events: {
    "InterestCollected(address,uint256,uint256,uint256)": EventFragment;
    "InterestDistributed(address,uint256)": EventFragment;
    "LiquidatorDeposited(address,uint256)": EventFragment;
    "Paused(address)": EventFragment;
    "RevenueRecipientSet(address,address)": EventFragment;
    "RevenueRedistributed(address,address,uint256)": EventFragment;
    "SavingsContractAdded(address,address)": EventFragment;
    "SavingsContractUpdated(address,address)": EventFragment;
    "SavingsRateChanged(uint256)": EventFragment;
    "StreamsFrozen()": EventFragment;
    "Unpaused(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "InterestCollected"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "InterestDistributed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LiquidatorDeposited"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Paused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RevenueRecipientSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RevenueRedistributed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SavingsContractAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SavingsContractUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SavingsRateChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "StreamsFrozen"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unpaused"): EventFragment;
}

export class SavingsManager extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: SavingsManagerInterface;

  functions: {
    addSavingsContract(
      _mAsset: string,
      _savingsContract: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    collectAndDistributeInterest(
      _mAsset: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    collectAndStreamInterest(
      _mAsset: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    depositLiquidation(
      _mAsset: string,
      _liquidated: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    distributeUnallocatedInterest(
      _mAsset: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    freezeStreams(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    lastBatchCollected(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    lastCollection(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    lastPeriodStart(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    liqStream(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber] & { end: BigNumber; rate: BigNumber }>;

    nexus(overrides?: CallOverrides): Promise<[string]>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    periodYield(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    revenueRecipients(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    savingsContracts(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    setRevenueRecipient(
      _mAsset: string,
      _recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setSavingsRate(
      _savingsRate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    unpause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateSavingsContract(
      _mAsset: string,
      _savingsContract: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    yieldStream(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber] & { end: BigNumber; rate: BigNumber }>;
  };

  addSavingsContract(
    _mAsset: string,
    _savingsContract: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  collectAndDistributeInterest(
    _mAsset: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  collectAndStreamInterest(
    _mAsset: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  depositLiquidation(
    _mAsset: string,
    _liquidated: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  distributeUnallocatedInterest(
    _mAsset: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  freezeStreams(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  lastBatchCollected(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  lastCollection(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  lastPeriodStart(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  liqStream(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber] & { end: BigNumber; rate: BigNumber }>;

  nexus(overrides?: CallOverrides): Promise<string>;

  pause(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  periodYield(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  revenueRecipients(arg0: string, overrides?: CallOverrides): Promise<string>;

  savingsContracts(arg0: string, overrides?: CallOverrides): Promise<string>;

  setRevenueRecipient(
    _mAsset: string,
    _recipient: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setSavingsRate(
    _savingsRate: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  unpause(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateSavingsContract(
    _mAsset: string,
    _savingsContract: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  yieldStream(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber] & { end: BigNumber; rate: BigNumber }>;

  callStatic: {
    addSavingsContract(
      _mAsset: string,
      _savingsContract: string,
      overrides?: CallOverrides
    ): Promise<void>;

    collectAndDistributeInterest(
      _mAsset: string,
      overrides?: CallOverrides
    ): Promise<void>;

    collectAndStreamInterest(
      _mAsset: string,
      overrides?: CallOverrides
    ): Promise<void>;

    depositLiquidation(
      _mAsset: string,
      _liquidated: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    distributeUnallocatedInterest(
      _mAsset: string,
      overrides?: CallOverrides
    ): Promise<void>;

    freezeStreams(overrides?: CallOverrides): Promise<void>;

    lastBatchCollected(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lastCollection(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    lastPeriodStart(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    liqStream(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber] & { end: BigNumber; rate: BigNumber }>;

    nexus(overrides?: CallOverrides): Promise<string>;

    pause(overrides?: CallOverrides): Promise<void>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    periodYield(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    revenueRecipients(arg0: string, overrides?: CallOverrides): Promise<string>;

    savingsContracts(arg0: string, overrides?: CallOverrides): Promise<string>;

    setRevenueRecipient(
      _mAsset: string,
      _recipient: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setSavingsRate(
      _savingsRate: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    unpause(overrides?: CallOverrides): Promise<void>;

    updateSavingsContract(
      _mAsset: string,
      _savingsContract: string,
      overrides?: CallOverrides
    ): Promise<void>;

    yieldStream(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber] & { end: BigNumber; rate: BigNumber }>;
  };

  filters: {
    InterestCollected(
      mAsset?: string | null,
      interest?: null,
      newTotalSupply?: null,
      apy?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber, BigNumber],
      {
        mAsset: string;
        interest: BigNumber;
        newTotalSupply: BigNumber;
        apy: BigNumber;
      }
    >;

    InterestDistributed(
      mAsset?: string | null,
      amountSent?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { mAsset: string; amountSent: BigNumber }
    >;

    LiquidatorDeposited(
      mAsset?: string | null,
      amount?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { mAsset: string; amount: BigNumber }
    >;

    Paused(account?: null): TypedEventFilter<[string], { account: string }>;

    RevenueRecipientSet(
      mAsset?: string | null,
      recipient?: null
    ): TypedEventFilter<
      [string, string],
      { mAsset: string; recipient: string }
    >;

    RevenueRedistributed(
      mAsset?: string | null,
      recipient?: null,
      amount?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { mAsset: string; recipient: string; amount: BigNumber }
    >;

    SavingsContractAdded(
      mAsset?: string | null,
      savingsContract?: null
    ): TypedEventFilter<
      [string, string],
      { mAsset: string; savingsContract: string }
    >;

    SavingsContractUpdated(
      mAsset?: string | null,
      savingsContract?: null
    ): TypedEventFilter<
      [string, string],
      { mAsset: string; savingsContract: string }
    >;

    SavingsRateChanged(
      newSavingsRate?: null
    ): TypedEventFilter<[BigNumber], { newSavingsRate: BigNumber }>;

    StreamsFrozen(): TypedEventFilter<[], {}>;

    Unpaused(account?: null): TypedEventFilter<[string], { account: string }>;
  };

  estimateGas: {
    addSavingsContract(
      _mAsset: string,
      _savingsContract: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    collectAndDistributeInterest(
      _mAsset: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    collectAndStreamInterest(
      _mAsset: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    depositLiquidation(
      _mAsset: string,
      _liquidated: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    distributeUnallocatedInterest(
      _mAsset: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    freezeStreams(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    lastBatchCollected(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lastCollection(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    lastPeriodStart(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    liqStream(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    nexus(overrides?: CallOverrides): Promise<BigNumber>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    periodYield(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    revenueRecipients(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    savingsContracts(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setRevenueRecipient(
      _mAsset: string,
      _recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setSavingsRate(
      _savingsRate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    unpause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateSavingsContract(
      _mAsset: string,
      _savingsContract: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    yieldStream(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    addSavingsContract(
      _mAsset: string,
      _savingsContract: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    collectAndDistributeInterest(
      _mAsset: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    collectAndStreamInterest(
      _mAsset: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    depositLiquidation(
      _mAsset: string,
      _liquidated: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    distributeUnallocatedInterest(
      _mAsset: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    freezeStreams(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    lastBatchCollected(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lastCollection(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lastPeriodStart(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    liqStream(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    nexus(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    periodYield(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    revenueRecipients(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    savingsContracts(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setRevenueRecipient(
      _mAsset: string,
      _recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setSavingsRate(
      _savingsRate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    unpause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateSavingsContract(
      _mAsset: string,
      _savingsContract: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    yieldStream(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
