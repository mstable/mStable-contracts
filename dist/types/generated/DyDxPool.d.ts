/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface DyDxPoolInterface extends ethers.utils.Interface {
  functions: {
    "getAccountWei(tuple,uint256)": FunctionFragment;
    "operate(tuple[],tuple[])": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "getAccountWei",
    values: [{ owner: string; number: BigNumberish }, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "operate",
    values: [
      { owner: string; number: BigNumberish }[],
      {
        actionType: BigNumberish;
        accountId: BigNumberish;
        amount: {
          sign: boolean;
          denomination: BigNumberish;
          ref: BigNumberish;
          value: BigNumberish;
        };
        primaryMarketId: BigNumberish;
        secondaryMarketId: BigNumberish;
        otherAddress: string;
        otherAccountId: BigNumberish;
        data: BytesLike;
      }[]
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "getAccountWei",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "operate", data: BytesLike): Result;

  events: {};
}

export class DyDxPool extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: DyDxPoolInterface;

  functions: {
    getAccountWei(
      account: { owner: string; number: BigNumberish },
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[[boolean, BigNumber] & { sign: boolean; value: BigNumber }]>;

    operate(
      arg0: { owner: string; number: BigNumberish }[],
      arg1: {
        actionType: BigNumberish;
        accountId: BigNumberish;
        amount: {
          sign: boolean;
          denomination: BigNumberish;
          ref: BigNumberish;
          value: BigNumberish;
        };
        primaryMarketId: BigNumberish;
        secondaryMarketId: BigNumberish;
        otherAddress: string;
        otherAccountId: BigNumberish;
        data: BytesLike;
      }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  getAccountWei(
    account: { owner: string; number: BigNumberish },
    marketId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[boolean, BigNumber] & { sign: boolean; value: BigNumber }>;

  operate(
    arg0: { owner: string; number: BigNumberish }[],
    arg1: {
      actionType: BigNumberish;
      accountId: BigNumberish;
      amount: {
        sign: boolean;
        denomination: BigNumberish;
        ref: BigNumberish;
        value: BigNumberish;
      };
      primaryMarketId: BigNumberish;
      secondaryMarketId: BigNumberish;
      otherAddress: string;
      otherAccountId: BigNumberish;
      data: BytesLike;
    }[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    getAccountWei(
      account: { owner: string; number: BigNumberish },
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean, BigNumber] & { sign: boolean; value: BigNumber }>;

    operate(
      arg0: { owner: string; number: BigNumberish }[],
      arg1: {
        actionType: BigNumberish;
        accountId: BigNumberish;
        amount: {
          sign: boolean;
          denomination: BigNumberish;
          ref: BigNumberish;
          value: BigNumberish;
        };
        primaryMarketId: BigNumberish;
        secondaryMarketId: BigNumberish;
        otherAddress: string;
        otherAccountId: BigNumberish;
        data: BytesLike;
      }[],
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    getAccountWei(
      account: { owner: string; number: BigNumberish },
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    operate(
      arg0: { owner: string; number: BigNumberish }[],
      arg1: {
        actionType: BigNumberish;
        accountId: BigNumberish;
        amount: {
          sign: boolean;
          denomination: BigNumberish;
          ref: BigNumberish;
          value: BigNumberish;
        };
        primaryMarketId: BigNumberish;
        secondaryMarketId: BigNumberish;
        otherAddress: string;
        otherAccountId: BigNumberish;
        data: BytesLike;
      }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    getAccountWei(
      account: { owner: string; number: BigNumberish },
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    operate(
      arg0: { owner: string; number: BigNumberish }[],
      arg1: {
        actionType: BigNumberish;
        accountId: BigNumberish;
        amount: {
          sign: boolean;
          denomination: BigNumberish;
          ref: BigNumberish;
          value: BigNumberish;
        };
        primaryMarketId: BigNumberish;
        secondaryMarketId: BigNumberish;
        otherAddress: string;
        otherAccountId: BigNumberish;
        data: BytesLike;
      }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
