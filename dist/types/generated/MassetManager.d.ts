/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface MassetManagerInterface extends ethers.utils.Interface {
  functions: {};

  events: {
    "BasketStatusChanged()": EventFragment;
    "BassetAdded(address,address)": EventFragment;
    "BassetStatusChanged(address,uint8)": EventFragment;
    "BassetsMigrated(address[],address)": EventFragment;
    "StartRampA(uint256,uint256,uint256,uint256)": EventFragment;
    "StopRampA(uint256,uint256)": EventFragment;
    "TransferFeeEnabled(address,bool)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "BasketStatusChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BassetAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BassetStatusChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BassetsMigrated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "StartRampA"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "StopRampA"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TransferFeeEnabled"): EventFragment;
}

export class MassetManager extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: MassetManagerInterface;

  functions: {};

  callStatic: {};

  filters: {
    BasketStatusChanged(): TypedEventFilter<[], {}>;

    BassetAdded(
      bAsset?: string | null,
      integrator?: null
    ): TypedEventFilter<
      [string, string],
      { bAsset: string; integrator: string }
    >;

    BassetStatusChanged(
      bAsset?: string | null,
      status?: null
    ): TypedEventFilter<[string, number], { bAsset: string; status: number }>;

    BassetsMigrated(
      bAssets?: null,
      newIntegrator?: null
    ): TypedEventFilter<
      [string[], string],
      { bAssets: string[]; newIntegrator: string }
    >;

    StartRampA(
      currentA?: null,
      targetA?: null,
      startTime?: null,
      rampEndTime?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber, BigNumber, BigNumber],
      {
        currentA: BigNumber;
        targetA: BigNumber;
        startTime: BigNumber;
        rampEndTime: BigNumber;
      }
    >;

    StopRampA(
      currentA?: null,
      time?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { currentA: BigNumber; time: BigNumber }
    >;

    TransferFeeEnabled(
      bAsset?: string | null,
      enabled?: null
    ): TypedEventFilter<
      [string, boolean],
      { bAsset: string; enabled: boolean }
    >;
  };

  estimateGas: {};

  populateTransaction: {};
}
