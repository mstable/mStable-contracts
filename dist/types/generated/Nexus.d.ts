/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface NexusInterface extends ethers.utils.Interface {
  functions: {
    "UPGRADE_DELAY()": FunctionFragment;
    "acceptProposedModule(bytes32)": FunctionFragment;
    "acceptProposedModules(bytes32[])": FunctionFragment;
    "cancelGovernorChange()": FunctionFragment;
    "cancelLockModule(bytes32)": FunctionFragment;
    "cancelProposedModule(bytes32)": FunctionFragment;
    "changeGovernor(address)": FunctionFragment;
    "claimGovernorChange()": FunctionFragment;
    "delay()": FunctionFragment;
    "getModule(bytes32)": FunctionFragment;
    "governor()": FunctionFragment;
    "initialize(bytes32[],address[],bool[],address)": FunctionFragment;
    "initialized()": FunctionFragment;
    "isGovernor()": FunctionFragment;
    "lockModule(bytes32)": FunctionFragment;
    "moduleExists(bytes32)": FunctionFragment;
    "modules(bytes32)": FunctionFragment;
    "proposeModule(bytes32,address)": FunctionFragment;
    "proposedGovernor()": FunctionFragment;
    "proposedLockModules(bytes32)": FunctionFragment;
    "proposedModules(bytes32)": FunctionFragment;
    "requestGovernorChange(address)": FunctionFragment;
    "requestLockModule(bytes32)": FunctionFragment;
    "requestTime()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "UPGRADE_DELAY",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "acceptProposedModule",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "acceptProposedModules",
    values: [BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelGovernorChange",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "cancelLockModule",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelProposedModule",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "changeGovernor",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "claimGovernorChange",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "delay", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getModule",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "governor", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [BytesLike[], string[], boolean[], string]
  ): string;
  encodeFunctionData(
    functionFragment: "initialized",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isGovernor",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lockModule",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "moduleExists",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "modules", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "proposeModule",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "proposedGovernor",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "proposedLockModules",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "proposedModules",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "requestGovernorChange",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "requestLockModule",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "requestTime",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "UPGRADE_DELAY",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "acceptProposedModule",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "acceptProposedModules",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cancelGovernorChange",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cancelLockModule",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cancelProposedModule",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeGovernor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimGovernorChange",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "delay", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getModule", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "governor", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "initialized",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isGovernor", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "lockModule", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "moduleExists",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "modules", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "proposeModule",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proposedGovernor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proposedLockModules",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proposedModules",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestGovernorChange",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestLockModule",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestTime",
    data: BytesLike
  ): Result;

  events: {
    "GovernorChangeCancelled(address,address)": EventFragment;
    "GovernorChangeClaimed(address)": EventFragment;
    "GovernorChangeRequested(address,address)": EventFragment;
    "GovernorChanged(address,address)": EventFragment;
    "ModuleAdded(bytes32,address,bool)": EventFragment;
    "ModuleCancelled(bytes32)": EventFragment;
    "ModuleLockCancelled(bytes32)": EventFragment;
    "ModuleLockEnabled(bytes32)": EventFragment;
    "ModuleLockRequested(bytes32,uint256)": EventFragment;
    "ModuleProposed(bytes32,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "GovernorChangeCancelled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "GovernorChangeClaimed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "GovernorChangeRequested"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "GovernorChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ModuleAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ModuleCancelled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ModuleLockCancelled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ModuleLockEnabled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ModuleLockRequested"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ModuleProposed"): EventFragment;
}

export class Nexus extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: NexusInterface;

  functions: {
    UPGRADE_DELAY(overrides?: CallOverrides): Promise<[BigNumber]>;

    acceptProposedModule(
      _key: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    acceptProposedModules(
      _keys: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    cancelGovernorChange(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    cancelLockModule(
      _key: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    cancelProposedModule(
      _key: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    changeGovernor(arg0: string, overrides?: CallOverrides): Promise<[void]>;

    claimGovernorChange(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    delay(overrides?: CallOverrides): Promise<[BigNumber]>;

    getModule(
      _key: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string] & { addr: string }>;

    governor(overrides?: CallOverrides): Promise<[string]>;

    initialize(
      _keys: BytesLike[],
      _addresses: string[],
      _isLocked: boolean[],
      _governorAddr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    initialized(overrides?: CallOverrides): Promise<[boolean]>;

    isGovernor(overrides?: CallOverrides): Promise<[boolean]>;

    lockModule(
      _key: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    moduleExists(
      _key: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    modules(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string, boolean] & { addr: string; isLocked: boolean }>;

    proposeModule(
      _key: BytesLike,
      _addr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    proposedGovernor(overrides?: CallOverrides): Promise<[string]>;

    proposedLockModules(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    proposedModules(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber] & { newAddress: string; timestamp: BigNumber }
    >;

    requestGovernorChange(
      _proposedGovernor: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    requestLockModule(
      _key: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    requestTime(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  UPGRADE_DELAY(overrides?: CallOverrides): Promise<BigNumber>;

  acceptProposedModule(
    _key: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  acceptProposedModules(
    _keys: BytesLike[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  cancelGovernorChange(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  cancelLockModule(
    _key: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  cancelProposedModule(
    _key: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  changeGovernor(arg0: string, overrides?: CallOverrides): Promise<void>;

  claimGovernorChange(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  delay(overrides?: CallOverrides): Promise<BigNumber>;

  getModule(_key: BytesLike, overrides?: CallOverrides): Promise<string>;

  governor(overrides?: CallOverrides): Promise<string>;

  initialize(
    _keys: BytesLike[],
    _addresses: string[],
    _isLocked: boolean[],
    _governorAddr: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  initialized(overrides?: CallOverrides): Promise<boolean>;

  isGovernor(overrides?: CallOverrides): Promise<boolean>;

  lockModule(
    _key: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  moduleExists(_key: BytesLike, overrides?: CallOverrides): Promise<boolean>;

  modules(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<[string, boolean] & { addr: string; isLocked: boolean }>;

  proposeModule(
    _key: BytesLike,
    _addr: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  proposedGovernor(overrides?: CallOverrides): Promise<string>;

  proposedLockModules(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  proposedModules(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber] & { newAddress: string; timestamp: BigNumber }
  >;

  requestGovernorChange(
    _proposedGovernor: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  requestLockModule(
    _key: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  requestTime(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    UPGRADE_DELAY(overrides?: CallOverrides): Promise<BigNumber>;

    acceptProposedModule(
      _key: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    acceptProposedModules(
      _keys: BytesLike[],
      overrides?: CallOverrides
    ): Promise<void>;

    cancelGovernorChange(overrides?: CallOverrides): Promise<void>;

    cancelLockModule(_key: BytesLike, overrides?: CallOverrides): Promise<void>;

    cancelProposedModule(
      _key: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    changeGovernor(arg0: string, overrides?: CallOverrides): Promise<void>;

    claimGovernorChange(overrides?: CallOverrides): Promise<void>;

    delay(overrides?: CallOverrides): Promise<BigNumber>;

    getModule(_key: BytesLike, overrides?: CallOverrides): Promise<string>;

    governor(overrides?: CallOverrides): Promise<string>;

    initialize(
      _keys: BytesLike[],
      _addresses: string[],
      _isLocked: boolean[],
      _governorAddr: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    initialized(overrides?: CallOverrides): Promise<boolean>;

    isGovernor(overrides?: CallOverrides): Promise<boolean>;

    lockModule(_key: BytesLike, overrides?: CallOverrides): Promise<void>;

    moduleExists(_key: BytesLike, overrides?: CallOverrides): Promise<boolean>;

    modules(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string, boolean] & { addr: string; isLocked: boolean }>;

    proposeModule(
      _key: BytesLike,
      _addr: string,
      overrides?: CallOverrides
    ): Promise<void>;

    proposedGovernor(overrides?: CallOverrides): Promise<string>;

    proposedLockModules(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    proposedModules(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber] & { newAddress: string; timestamp: BigNumber }
    >;

    requestGovernorChange(
      _proposedGovernor: string,
      overrides?: CallOverrides
    ): Promise<void>;

    requestLockModule(
      _key: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    requestTime(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    GovernorChangeCancelled(
      governor?: string | null,
      proposed?: string | null
    ): TypedEventFilter<
      [string, string],
      { governor: string; proposed: string }
    >;

    GovernorChangeClaimed(
      proposedGovernor?: string | null
    ): TypedEventFilter<[string], { proposedGovernor: string }>;

    GovernorChangeRequested(
      governor?: string | null,
      proposed?: string | null
    ): TypedEventFilter<
      [string, string],
      { governor: string; proposed: string }
    >;

    GovernorChanged(
      previousGovernor?: string | null,
      newGovernor?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousGovernor: string; newGovernor: string }
    >;

    ModuleAdded(
      key?: BytesLike | null,
      addr?: null,
      isLocked?: null
    ): TypedEventFilter<
      [string, string, boolean],
      { key: string; addr: string; isLocked: boolean }
    >;

    ModuleCancelled(
      key?: BytesLike | null
    ): TypedEventFilter<[string], { key: string }>;

    ModuleLockCancelled(
      key?: BytesLike | null
    ): TypedEventFilter<[string], { key: string }>;

    ModuleLockEnabled(
      key?: BytesLike | null
    ): TypedEventFilter<[string], { key: string }>;

    ModuleLockRequested(
      key?: BytesLike | null,
      timestamp?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { key: string; timestamp: BigNumber }
    >;

    ModuleProposed(
      key?: BytesLike | null,
      addr?: null,
      timestamp?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { key: string; addr: string; timestamp: BigNumber }
    >;
  };

  estimateGas: {
    UPGRADE_DELAY(overrides?: CallOverrides): Promise<BigNumber>;

    acceptProposedModule(
      _key: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    acceptProposedModules(
      _keys: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    cancelGovernorChange(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    cancelLockModule(
      _key: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    cancelProposedModule(
      _key: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    changeGovernor(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    claimGovernorChange(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    delay(overrides?: CallOverrides): Promise<BigNumber>;

    getModule(_key: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    governor(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      _keys: BytesLike[],
      _addresses: string[],
      _isLocked: boolean[],
      _governorAddr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    initialized(overrides?: CallOverrides): Promise<BigNumber>;

    isGovernor(overrides?: CallOverrides): Promise<BigNumber>;

    lockModule(
      _key: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    moduleExists(
      _key: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    modules(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    proposeModule(
      _key: BytesLike,
      _addr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    proposedGovernor(overrides?: CallOverrides): Promise<BigNumber>;

    proposedLockModules(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    proposedModules(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    requestGovernorChange(
      _proposedGovernor: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    requestLockModule(
      _key: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    requestTime(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    UPGRADE_DELAY(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    acceptProposedModule(
      _key: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    acceptProposedModules(
      _keys: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    cancelGovernorChange(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    cancelLockModule(
      _key: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    cancelProposedModule(
      _key: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    changeGovernor(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    claimGovernorChange(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    delay(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getModule(
      _key: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    governor(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initialize(
      _keys: BytesLike[],
      _addresses: string[],
      _isLocked: boolean[],
      _governorAddr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    initialized(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isGovernor(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lockModule(
      _key: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    moduleExists(
      _key: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    modules(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    proposeModule(
      _key: BytesLike,
      _addr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    proposedGovernor(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    proposedLockModules(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    proposedModules(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    requestGovernorChange(
      _proposedGovernor: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    requestLockModule(
      _key: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    requestTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
