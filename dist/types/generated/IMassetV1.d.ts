/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface IMassetV1Interface extends ethers.utils.Interface {
  functions: {
    "collectInterest()": FunctionFragment;
    "collectPlatformInterest()": FunctionFragment;
    "forgeValidator()": FunctionFragment;
    "getBasketManager()": FunctionFragment;
    "getSwapOutput(address,address,uint256)": FunctionFragment;
    "mint(address,uint256)": FunctionFragment;
    "mintMulti(address[],uint256[],address)": FunctionFragment;
    "mintTo(address,uint256,address)": FunctionFragment;
    "redeem(address,uint256)": FunctionFragment;
    "redeemMasset(uint256,address)": FunctionFragment;
    "redeemMulti(address[],uint256[],address)": FunctionFragment;
    "redeemTo(address,uint256,address)": FunctionFragment;
    "setSwapFee(uint256)": FunctionFragment;
    "swap(address,address,uint256,address)": FunctionFragment;
    "swapFee()": FunctionFragment;
    "totalSupply()": FunctionFragment;
    "upgradeForgeValidator(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "collectInterest",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "collectPlatformInterest",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "forgeValidator",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getBasketManager",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getSwapOutput",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "mint",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "mintMulti",
    values: [string[], BigNumberish[], string]
  ): string;
  encodeFunctionData(
    functionFragment: "mintTo",
    values: [string, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "redeem",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "redeemMasset",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "redeemMulti",
    values: [string[], BigNumberish[], string]
  ): string;
  encodeFunctionData(
    functionFragment: "redeemTo",
    values: [string, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setSwapFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "swap",
    values: [string, string, BigNumberish, string]
  ): string;
  encodeFunctionData(functionFragment: "swapFee", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeForgeValidator",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "collectInterest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "collectPlatformInterest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "forgeValidator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBasketManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSwapOutput",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "mint", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "mintMulti", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "mintTo", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "redeem", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "redeemMasset",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "redeemMulti",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "redeemTo", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setSwapFee", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "swap", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "swapFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "upgradeForgeValidator",
    data: BytesLike
  ): Result;

  events: {};
}

export class IMassetV1 extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: IMassetV1Interface;

  functions: {
    collectInterest(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    collectPlatformInterest(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    forgeValidator(overrides?: CallOverrides): Promise<[string]>;

    getBasketManager(overrides?: CallOverrides): Promise<[string]>;

    getSwapOutput(
      _input: string,
      _output: string,
      _quantity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean, string, BigNumber] & { output: BigNumber }>;

    mint(
      _basset: string,
      _bassetQuantity: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    mintMulti(
      _bAssets: string[],
      _bassetQuantity: BigNumberish[],
      _recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    mintTo(
      _basset: string,
      _bassetQuantity: BigNumberish,
      _recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    redeem(
      _basset: string,
      _bassetQuantity: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    redeemMasset(
      _mAssetQuantity: BigNumberish,
      _recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    redeemMulti(
      _bAssets: string[],
      _bassetQuantities: BigNumberish[],
      _recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    redeemTo(
      _basset: string,
      _bassetQuantity: BigNumberish,
      _recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setSwapFee(
      _swapFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    swap(
      _input: string,
      _output: string,
      _quantity: BigNumberish,
      _recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    swapFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    upgradeForgeValidator(
      _newForgeValidator: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  collectInterest(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  collectPlatformInterest(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  forgeValidator(overrides?: CallOverrides): Promise<string>;

  getBasketManager(overrides?: CallOverrides): Promise<string>;

  getSwapOutput(
    _input: string,
    _output: string,
    _quantity: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[boolean, string, BigNumber] & { output: BigNumber }>;

  mint(
    _basset: string,
    _bassetQuantity: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  mintMulti(
    _bAssets: string[],
    _bassetQuantity: BigNumberish[],
    _recipient: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  mintTo(
    _basset: string,
    _bassetQuantity: BigNumberish,
    _recipient: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  redeem(
    _basset: string,
    _bassetQuantity: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  redeemMasset(
    _mAssetQuantity: BigNumberish,
    _recipient: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  redeemMulti(
    _bAssets: string[],
    _bassetQuantities: BigNumberish[],
    _recipient: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  redeemTo(
    _basset: string,
    _bassetQuantity: BigNumberish,
    _recipient: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setSwapFee(
    _swapFee: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  swap(
    _input: string,
    _output: string,
    _quantity: BigNumberish,
    _recipient: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  swapFee(overrides?: CallOverrides): Promise<BigNumber>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  upgradeForgeValidator(
    _newForgeValidator: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    collectInterest(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        swapFeesGained: BigNumber;
        newTotalSupply: BigNumber;
      }
    >;

    collectPlatformInterest(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        interestGained: BigNumber;
        newTotalSupply: BigNumber;
      }
    >;

    forgeValidator(overrides?: CallOverrides): Promise<string>;

    getBasketManager(overrides?: CallOverrides): Promise<string>;

    getSwapOutput(
      _input: string,
      _output: string,
      _quantity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean, string, BigNumber] & { output: BigNumber }>;

    mint(
      _basset: string,
      _bassetQuantity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    mintMulti(
      _bAssets: string[],
      _bassetQuantity: BigNumberish[],
      _recipient: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    mintTo(
      _basset: string,
      _bassetQuantity: BigNumberish,
      _recipient: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    redeem(
      _basset: string,
      _bassetQuantity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    redeemMasset(
      _mAssetQuantity: BigNumberish,
      _recipient: string,
      overrides?: CallOverrides
    ): Promise<void>;

    redeemMulti(
      _bAssets: string[],
      _bassetQuantities: BigNumberish[],
      _recipient: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    redeemTo(
      _basset: string,
      _bassetQuantity: BigNumberish,
      _recipient: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setSwapFee(
      _swapFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    swap(
      _input: string,
      _output: string,
      _quantity: BigNumberish,
      _recipient: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    swapFee(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    upgradeForgeValidator(
      _newForgeValidator: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    collectInterest(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    collectPlatformInterest(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    forgeValidator(overrides?: CallOverrides): Promise<BigNumber>;

    getBasketManager(overrides?: CallOverrides): Promise<BigNumber>;

    getSwapOutput(
      _input: string,
      _output: string,
      _quantity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    mint(
      _basset: string,
      _bassetQuantity: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    mintMulti(
      _bAssets: string[],
      _bassetQuantity: BigNumberish[],
      _recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    mintTo(
      _basset: string,
      _bassetQuantity: BigNumberish,
      _recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    redeem(
      _basset: string,
      _bassetQuantity: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    redeemMasset(
      _mAssetQuantity: BigNumberish,
      _recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    redeemMulti(
      _bAssets: string[],
      _bassetQuantities: BigNumberish[],
      _recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    redeemTo(
      _basset: string,
      _bassetQuantity: BigNumberish,
      _recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setSwapFee(
      _swapFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    swap(
      _input: string,
      _output: string,
      _quantity: BigNumberish,
      _recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    swapFee(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    upgradeForgeValidator(
      _newForgeValidator: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    collectInterest(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    collectPlatformInterest(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    forgeValidator(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getBasketManager(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getSwapOutput(
      _input: string,
      _output: string,
      _quantity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    mint(
      _basset: string,
      _bassetQuantity: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    mintMulti(
      _bAssets: string[],
      _bassetQuantity: BigNumberish[],
      _recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    mintTo(
      _basset: string,
      _bassetQuantity: BigNumberish,
      _recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    redeem(
      _basset: string,
      _bassetQuantity: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    redeemMasset(
      _mAssetQuantity: BigNumberish,
      _recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    redeemMulti(
      _bAssets: string[],
      _bassetQuantities: BigNumberish[],
      _recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    redeemTo(
      _basset: string,
      _bassetQuantity: BigNumberish,
      _recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setSwapFee(
      _swapFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    swap(
      _input: string,
      _output: string,
      _quantity: BigNumberish,
      _recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    swapFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    upgradeForgeValidator(
      _newForgeValidator: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
