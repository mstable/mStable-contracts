/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface DelayedClaimableGovernorInterface extends ethers.utils.Interface {
  functions: {
    "cancelGovernorChange()": FunctionFragment;
    "changeGovernor(address)": FunctionFragment;
    "claimGovernorChange()": FunctionFragment;
    "delay()": FunctionFragment;
    "governor()": FunctionFragment;
    "isGovernor()": FunctionFragment;
    "proposedGovernor()": FunctionFragment;
    "requestGovernorChange(address)": FunctionFragment;
    "requestTime()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "cancelGovernorChange",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "changeGovernor",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "claimGovernorChange",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "delay", values?: undefined): string;
  encodeFunctionData(functionFragment: "governor", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "isGovernor",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "proposedGovernor",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "requestGovernorChange",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "requestTime",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "cancelGovernorChange",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeGovernor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimGovernorChange",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "delay", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "governor", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isGovernor", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "proposedGovernor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestGovernorChange",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestTime",
    data: BytesLike
  ): Result;

  events: {
    "GovernorChangeCancelled(address,address)": EventFragment;
    "GovernorChangeClaimed(address)": EventFragment;
    "GovernorChangeRequested(address,address)": EventFragment;
    "GovernorChanged(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "GovernorChangeCancelled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "GovernorChangeClaimed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "GovernorChangeRequested"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "GovernorChanged"): EventFragment;
}

export class DelayedClaimableGovernor extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: DelayedClaimableGovernorInterface;

  functions: {
    cancelGovernorChange(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    changeGovernor(arg0: string, overrides?: CallOverrides): Promise<[void]>;

    claimGovernorChange(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    delay(overrides?: CallOverrides): Promise<[BigNumber]>;

    governor(overrides?: CallOverrides): Promise<[string]>;

    isGovernor(overrides?: CallOverrides): Promise<[boolean]>;

    proposedGovernor(overrides?: CallOverrides): Promise<[string]>;

    requestGovernorChange(
      _proposedGovernor: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    requestTime(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  cancelGovernorChange(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  changeGovernor(arg0: string, overrides?: CallOverrides): Promise<void>;

  claimGovernorChange(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  delay(overrides?: CallOverrides): Promise<BigNumber>;

  governor(overrides?: CallOverrides): Promise<string>;

  isGovernor(overrides?: CallOverrides): Promise<boolean>;

  proposedGovernor(overrides?: CallOverrides): Promise<string>;

  requestGovernorChange(
    _proposedGovernor: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  requestTime(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    cancelGovernorChange(overrides?: CallOverrides): Promise<void>;

    changeGovernor(arg0: string, overrides?: CallOverrides): Promise<void>;

    claimGovernorChange(overrides?: CallOverrides): Promise<void>;

    delay(overrides?: CallOverrides): Promise<BigNumber>;

    governor(overrides?: CallOverrides): Promise<string>;

    isGovernor(overrides?: CallOverrides): Promise<boolean>;

    proposedGovernor(overrides?: CallOverrides): Promise<string>;

    requestGovernorChange(
      _proposedGovernor: string,
      overrides?: CallOverrides
    ): Promise<void>;

    requestTime(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    GovernorChangeCancelled(
      governor?: string | null,
      proposed?: string | null
    ): TypedEventFilter<
      [string, string],
      { governor: string; proposed: string }
    >;

    GovernorChangeClaimed(
      proposedGovernor?: string | null
    ): TypedEventFilter<[string], { proposedGovernor: string }>;

    GovernorChangeRequested(
      governor?: string | null,
      proposed?: string | null
    ): TypedEventFilter<
      [string, string],
      { governor: string; proposed: string }
    >;

    GovernorChanged(
      previousGovernor?: string | null,
      newGovernor?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousGovernor: string; newGovernor: string }
    >;
  };

  estimateGas: {
    cancelGovernorChange(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    changeGovernor(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    claimGovernorChange(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    delay(overrides?: CallOverrides): Promise<BigNumber>;

    governor(overrides?: CallOverrides): Promise<BigNumber>;

    isGovernor(overrides?: CallOverrides): Promise<BigNumber>;

    proposedGovernor(overrides?: CallOverrides): Promise<BigNumber>;

    requestGovernorChange(
      _proposedGovernor: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    requestTime(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    cancelGovernorChange(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    changeGovernor(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    claimGovernorChange(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    delay(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    governor(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isGovernor(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    proposedGovernor(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    requestGovernorChange(
      _proposedGovernor: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    requestTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
