/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface IFeederPoolInterface extends ethers.utils.Interface {
  functions: {
    "collectPendingFees()": FunctionFragment;
    "collectPlatformInterest()": FunctionFragment;
    "getBasset(address)": FunctionFragment;
    "getBassets()": FunctionFragment;
    "getConfig()": FunctionFragment;
    "getMintMultiOutput(address[],uint256[])": FunctionFragment;
    "getMintOutput(address,uint256)": FunctionFragment;
    "getPrice()": FunctionFragment;
    "getRedeemExactBassetsOutput(address[],uint256[])": FunctionFragment;
    "getRedeemOutput(address,uint256)": FunctionFragment;
    "getSwapOutput(address,address,uint256)": FunctionFragment;
    "mAsset()": FunctionFragment;
    "mint(address,uint256,uint256,address)": FunctionFragment;
    "mintMulti(address[],uint256[],uint256,address)": FunctionFragment;
    "redeem(address,uint256,uint256,address)": FunctionFragment;
    "redeemExactBassets(address[],uint256[],uint256,address)": FunctionFragment;
    "redeemProportionately(uint256,uint256[],address)": FunctionFragment;
    "swap(address,address,uint256,uint256,address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "collectPendingFees",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "collectPlatformInterest",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getBasset", values: [string]): string;
  encodeFunctionData(
    functionFragment: "getBassets",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getConfig", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getMintMultiOutput",
    values: [string[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getMintOutput",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "getPrice", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getRedeemExactBassetsOutput",
    values: [string[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getRedeemOutput",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getSwapOutput",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "mAsset", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "mint",
    values: [string, BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "mintMulti",
    values: [string[], BigNumberish[], BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "redeem",
    values: [string, BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "redeemExactBassets",
    values: [string[], BigNumberish[], BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "redeemProportionately",
    values: [BigNumberish, BigNumberish[], string]
  ): string;
  encodeFunctionData(
    functionFragment: "swap",
    values: [string, string, BigNumberish, BigNumberish, string]
  ): string;

  decodeFunctionResult(
    functionFragment: "collectPendingFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "collectPlatformInterest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getBasset", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getBassets", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getConfig", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getMintMultiOutput",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMintOutput",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getPrice", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getRedeemExactBassetsOutput",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRedeemOutput",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSwapOutput",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "mAsset", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "mint", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "mintMulti", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "redeem", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "redeemExactBassets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "redeemProportionately",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "swap", data: BytesLike): Result;

  events: {};
}

export class IFeederPool extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: IFeederPoolInterface;

  functions: {
    collectPendingFees(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    collectPlatformInterest(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getBasset(
      _token: string,
      overrides?: CallOverrides
    ): Promise<
      [
        [string, string, boolean, number] & {
          addr: string;
          integrator: string;
          hasTxFee: boolean;
          status: number;
        },
        [BigNumber, BigNumber] & { ratio: BigNumber; vaultBalance: BigNumber }
      ] & {
        personal: [string, string, boolean, number] & {
          addr: string;
          integrator: string;
          hasTxFee: boolean;
          status: number;
        };
        data: [BigNumber, BigNumber] & {
          ratio: BigNumber;
          vaultBalance: BigNumber;
        };
      }
    >;

    getBassets(
      overrides?: CallOverrides
    ): Promise<
      [
        ([string, string, boolean, number] & {
          addr: string;
          integrator: string;
          hasTxFee: boolean;
          status: number;
        })[],
        ([BigNumber, BigNumber] & {
          ratio: BigNumber;
          vaultBalance: BigNumber;
        })[]
      ] & {
        personal: ([string, string, boolean, number] & {
          addr: string;
          integrator: string;
          hasTxFee: boolean;
          status: number;
        })[];
        data: ([BigNumber, BigNumber] & {
          ratio: BigNumber;
          vaultBalance: BigNumber;
        })[];
      }
    >;

    getConfig(
      overrides?: CallOverrides
    ): Promise<
      [
        [
          BigNumber,
          BigNumber,
          [BigNumber, BigNumber] & { min: BigNumber; max: BigNumber }
        ] & {
          supply: BigNumber;
          a: BigNumber;
          limits: [BigNumber, BigNumber] & { min: BigNumber; max: BigNumber };
        }
      ] & {
        config: [
          BigNumber,
          BigNumber,
          [BigNumber, BigNumber] & { min: BigNumber; max: BigNumber }
        ] & {
          supply: BigNumber;
          a: BigNumber;
          limits: [BigNumber, BigNumber] & { min: BigNumber; max: BigNumber };
        };
      }
    >;

    getMintMultiOutput(
      _inputs: string[],
      _inputQuantities: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { mintOutput: BigNumber }>;

    getMintOutput(
      _input: string,
      _inputQuantity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { mintOutput: BigNumber }>;

    getPrice(
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber] & { price: BigNumber; k: BigNumber }>;

    getRedeemExactBassetsOutput(
      _outputs: string[],
      _outputQuantities: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { mAssetAmount: BigNumber }>;

    getRedeemOutput(
      _output: string,
      _fpTokenQuantity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { bAssetOutput: BigNumber }>;

    getSwapOutput(
      _input: string,
      _output: string,
      _inputQuantity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { swapOutput: BigNumber }>;

    mAsset(overrides?: CallOverrides): Promise<[string]>;

    mint(
      _input: string,
      _inputQuantity: BigNumberish,
      _minOutputQuantity: BigNumberish,
      _recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    mintMulti(
      _inputs: string[],
      _inputQuantities: BigNumberish[],
      _minOutputQuantity: BigNumberish,
      _recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    redeem(
      _output: string,
      _fpTokenQuantity: BigNumberish,
      _minOutputQuantity: BigNumberish,
      _recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    redeemExactBassets(
      _outputs: string[],
      _outputQuantities: BigNumberish[],
      _maxMassetQuantity: BigNumberish,
      _recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    redeemProportionately(
      _fpTokenQuantity: BigNumberish,
      _minOutputQuantities: BigNumberish[],
      _recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    swap(
      _input: string,
      _output: string,
      _inputQuantity: BigNumberish,
      _minOutputQuantity: BigNumberish,
      _recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  collectPendingFees(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  collectPlatformInterest(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getBasset(
    _token: string,
    overrides?: CallOverrides
  ): Promise<
    [
      [string, string, boolean, number] & {
        addr: string;
        integrator: string;
        hasTxFee: boolean;
        status: number;
      },
      [BigNumber, BigNumber] & { ratio: BigNumber; vaultBalance: BigNumber }
    ] & {
      personal: [string, string, boolean, number] & {
        addr: string;
        integrator: string;
        hasTxFee: boolean;
        status: number;
      };
      data: [BigNumber, BigNumber] & {
        ratio: BigNumber;
        vaultBalance: BigNumber;
      };
    }
  >;

  getBassets(
    overrides?: CallOverrides
  ): Promise<
    [
      ([string, string, boolean, number] & {
        addr: string;
        integrator: string;
        hasTxFee: boolean;
        status: number;
      })[],
      ([BigNumber, BigNumber] & { ratio: BigNumber; vaultBalance: BigNumber })[]
    ] & {
      personal: ([string, string, boolean, number] & {
        addr: string;
        integrator: string;
        hasTxFee: boolean;
        status: number;
      })[];
      data: ([BigNumber, BigNumber] & {
        ratio: BigNumber;
        vaultBalance: BigNumber;
      })[];
    }
  >;

  getConfig(
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      BigNumber,
      [BigNumber, BigNumber] & { min: BigNumber; max: BigNumber }
    ] & {
      supply: BigNumber;
      a: BigNumber;
      limits: [BigNumber, BigNumber] & { min: BigNumber; max: BigNumber };
    }
  >;

  getMintMultiOutput(
    _inputs: string[],
    _inputQuantities: BigNumberish[],
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getMintOutput(
    _input: string,
    _inputQuantity: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getPrice(
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber] & { price: BigNumber; k: BigNumber }>;

  getRedeemExactBassetsOutput(
    _outputs: string[],
    _outputQuantities: BigNumberish[],
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getRedeemOutput(
    _output: string,
    _fpTokenQuantity: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getSwapOutput(
    _input: string,
    _output: string,
    _inputQuantity: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  mAsset(overrides?: CallOverrides): Promise<string>;

  mint(
    _input: string,
    _inputQuantity: BigNumberish,
    _minOutputQuantity: BigNumberish,
    _recipient: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  mintMulti(
    _inputs: string[],
    _inputQuantities: BigNumberish[],
    _minOutputQuantity: BigNumberish,
    _recipient: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  redeem(
    _output: string,
    _fpTokenQuantity: BigNumberish,
    _minOutputQuantity: BigNumberish,
    _recipient: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  redeemExactBassets(
    _outputs: string[],
    _outputQuantities: BigNumberish[],
    _maxMassetQuantity: BigNumberish,
    _recipient: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  redeemProportionately(
    _fpTokenQuantity: BigNumberish,
    _minOutputQuantities: BigNumberish[],
    _recipient: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  swap(
    _input: string,
    _output: string,
    _inputQuantity: BigNumberish,
    _minOutputQuantity: BigNumberish,
    _recipient: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    collectPendingFees(overrides?: CallOverrides): Promise<void>;

    collectPlatformInterest(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { mintAmount: BigNumber; newSupply: BigNumber }
    >;

    getBasset(
      _token: string,
      overrides?: CallOverrides
    ): Promise<
      [
        [string, string, boolean, number] & {
          addr: string;
          integrator: string;
          hasTxFee: boolean;
          status: number;
        },
        [BigNumber, BigNumber] & { ratio: BigNumber; vaultBalance: BigNumber }
      ] & {
        personal: [string, string, boolean, number] & {
          addr: string;
          integrator: string;
          hasTxFee: boolean;
          status: number;
        };
        data: [BigNumber, BigNumber] & {
          ratio: BigNumber;
          vaultBalance: BigNumber;
        };
      }
    >;

    getBassets(
      overrides?: CallOverrides
    ): Promise<
      [
        ([string, string, boolean, number] & {
          addr: string;
          integrator: string;
          hasTxFee: boolean;
          status: number;
        })[],
        ([BigNumber, BigNumber] & {
          ratio: BigNumber;
          vaultBalance: BigNumber;
        })[]
      ] & {
        personal: ([string, string, boolean, number] & {
          addr: string;
          integrator: string;
          hasTxFee: boolean;
          status: number;
        })[];
        data: ([BigNumber, BigNumber] & {
          ratio: BigNumber;
          vaultBalance: BigNumber;
        })[];
      }
    >;

    getConfig(
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        [BigNumber, BigNumber] & { min: BigNumber; max: BigNumber }
      ] & {
        supply: BigNumber;
        a: BigNumber;
        limits: [BigNumber, BigNumber] & { min: BigNumber; max: BigNumber };
      }
    >;

    getMintMultiOutput(
      _inputs: string[],
      _inputQuantities: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMintOutput(
      _input: string,
      _inputQuantity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPrice(
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber] & { price: BigNumber; k: BigNumber }>;

    getRedeemExactBassetsOutput(
      _outputs: string[],
      _outputQuantities: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRedeemOutput(
      _output: string,
      _fpTokenQuantity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSwapOutput(
      _input: string,
      _output: string,
      _inputQuantity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    mAsset(overrides?: CallOverrides): Promise<string>;

    mint(
      _input: string,
      _inputQuantity: BigNumberish,
      _minOutputQuantity: BigNumberish,
      _recipient: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    mintMulti(
      _inputs: string[],
      _inputQuantities: BigNumberish[],
      _minOutputQuantity: BigNumberish,
      _recipient: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    redeem(
      _output: string,
      _fpTokenQuantity: BigNumberish,
      _minOutputQuantity: BigNumberish,
      _recipient: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    redeemExactBassets(
      _outputs: string[],
      _outputQuantities: BigNumberish[],
      _maxMassetQuantity: BigNumberish,
      _recipient: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    redeemProportionately(
      _fpTokenQuantity: BigNumberish,
      _minOutputQuantities: BigNumberish[],
      _recipient: string,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    swap(
      _input: string,
      _output: string,
      _inputQuantity: BigNumberish,
      _minOutputQuantity: BigNumberish,
      _recipient: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {};

  estimateGas: {
    collectPendingFees(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    collectPlatformInterest(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getBasset(_token: string, overrides?: CallOverrides): Promise<BigNumber>;

    getBassets(overrides?: CallOverrides): Promise<BigNumber>;

    getConfig(overrides?: CallOverrides): Promise<BigNumber>;

    getMintMultiOutput(
      _inputs: string[],
      _inputQuantities: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMintOutput(
      _input: string,
      _inputQuantity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPrice(overrides?: CallOverrides): Promise<BigNumber>;

    getRedeemExactBassetsOutput(
      _outputs: string[],
      _outputQuantities: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRedeemOutput(
      _output: string,
      _fpTokenQuantity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSwapOutput(
      _input: string,
      _output: string,
      _inputQuantity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    mAsset(overrides?: CallOverrides): Promise<BigNumber>;

    mint(
      _input: string,
      _inputQuantity: BigNumberish,
      _minOutputQuantity: BigNumberish,
      _recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    mintMulti(
      _inputs: string[],
      _inputQuantities: BigNumberish[],
      _minOutputQuantity: BigNumberish,
      _recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    redeem(
      _output: string,
      _fpTokenQuantity: BigNumberish,
      _minOutputQuantity: BigNumberish,
      _recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    redeemExactBassets(
      _outputs: string[],
      _outputQuantities: BigNumberish[],
      _maxMassetQuantity: BigNumberish,
      _recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    redeemProportionately(
      _fpTokenQuantity: BigNumberish,
      _minOutputQuantities: BigNumberish[],
      _recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    swap(
      _input: string,
      _output: string,
      _inputQuantity: BigNumberish,
      _minOutputQuantity: BigNumberish,
      _recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    collectPendingFees(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    collectPlatformInterest(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getBasset(
      _token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getBassets(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getConfig(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getMintMultiOutput(
      _inputs: string[],
      _inputQuantities: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMintOutput(
      _input: string,
      _inputQuantity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPrice(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getRedeemExactBassetsOutput(
      _outputs: string[],
      _outputQuantities: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRedeemOutput(
      _output: string,
      _fpTokenQuantity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSwapOutput(
      _input: string,
      _output: string,
      _inputQuantity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    mAsset(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    mint(
      _input: string,
      _inputQuantity: BigNumberish,
      _minOutputQuantity: BigNumberish,
      _recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    mintMulti(
      _inputs: string[],
      _inputQuantities: BigNumberish[],
      _minOutputQuantity: BigNumberish,
      _recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    redeem(
      _output: string,
      _fpTokenQuantity: BigNumberish,
      _minOutputQuantity: BigNumberish,
      _recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    redeemExactBassets(
      _outputs: string[],
      _outputQuantities: BigNumberish[],
      _maxMassetQuantity: BigNumberish,
      _recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    redeemProportionately(
      _fpTokenQuantity: BigNumberish,
      _minOutputQuantities: BigNumberish[],
      _recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    swap(
      _input: string,
      _output: string,
      _inputQuantity: BigNumberish,
      _minOutputQuantity: BigNumberish,
      _recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
