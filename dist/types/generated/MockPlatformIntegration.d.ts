/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface MockPlatformIntegrationInterface extends ethers.utils.Interface {
  functions: {
    "addWhitelist(address[])": FunctionFragment;
    "bAssetToPToken(address)": FunctionFragment;
    "checkBalance(address)": FunctionFragment;
    "deposit(address,uint256,bool)": FunctionFragment;
    "nexus()": FunctionFragment;
    "platformAddress()": FunctionFragment;
    "reApproveAllTokens()": FunctionFragment;
    "setPTokenAddress(address,address)": FunctionFragment;
    "whitelist(address)": FunctionFragment;
    "withdraw(address,address,uint256,bool)": FunctionFragment;
    "withdrawRaw(address,address,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "addWhitelist",
    values: [string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "bAssetToPToken",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "checkBalance",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [string, BigNumberish, boolean]
  ): string;
  encodeFunctionData(functionFragment: "nexus", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "platformAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "reApproveAllTokens",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setPTokenAddress",
    values: [string, string]
  ): string;
  encodeFunctionData(functionFragment: "whitelist", values: [string]): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [string, string, BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawRaw",
    values: [string, string, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "addWhitelist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "bAssetToPToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "nexus", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "platformAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "reApproveAllTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPTokenAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "whitelist", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawRaw",
    data: BytesLike
  ): Result;

  events: {
    "Deposit(address,address,uint256)": EventFragment;
    "PTokenAdded(address,address)": EventFragment;
    "PlatformWithdrawal(address,address,uint256,uint256)": EventFragment;
    "Whitelisted(address)": EventFragment;
    "Withdrawal(address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Deposit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PTokenAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PlatformWithdrawal"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Whitelisted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Withdrawal"): EventFragment;
}

export class MockPlatformIntegration extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: MockPlatformIntegrationInterface;

  functions: {
    addWhitelist(
      _whitelisted: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    bAssetToPToken(arg0: string, overrides?: CallOverrides): Promise<[string]>;

    checkBalance(
      _bAsset: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    deposit(
      _bAsset: string,
      _amount: BigNumberish,
      _hasTxFee: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    nexus(overrides?: CallOverrides): Promise<[string]>;

    platformAddress(overrides?: CallOverrides): Promise<[string]>;

    reApproveAllTokens(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setPTokenAddress(
      _bAsset: string,
      _pToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    whitelist(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

    "withdraw(address,address,uint256,bool)"(
      _receiver: string,
      _bAsset: string,
      _amount: BigNumberish,
      _hasTxFee: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "withdraw(address,address,uint256,uint256,bool)"(
      _receiver: string,
      _bAsset: string,
      _amount: BigNumberish,
      _totalAmount: BigNumberish,
      _hasTxFee: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawRaw(
      _receiver: string,
      _bAsset: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  addWhitelist(
    _whitelisted: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  bAssetToPToken(arg0: string, overrides?: CallOverrides): Promise<string>;

  checkBalance(
    _bAsset: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  deposit(
    _bAsset: string,
    _amount: BigNumberish,
    _hasTxFee: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  nexus(overrides?: CallOverrides): Promise<string>;

  platformAddress(overrides?: CallOverrides): Promise<string>;

  reApproveAllTokens(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setPTokenAddress(
    _bAsset: string,
    _pToken: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  whitelist(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  "withdraw(address,address,uint256,bool)"(
    _receiver: string,
    _bAsset: string,
    _amount: BigNumberish,
    _hasTxFee: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "withdraw(address,address,uint256,uint256,bool)"(
    _receiver: string,
    _bAsset: string,
    _amount: BigNumberish,
    _totalAmount: BigNumberish,
    _hasTxFee: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawRaw(
    _receiver: string,
    _bAsset: string,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    addWhitelist(
      _whitelisted: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    bAssetToPToken(arg0: string, overrides?: CallOverrides): Promise<string>;

    checkBalance(
      _bAsset: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    deposit(
      _bAsset: string,
      _amount: BigNumberish,
      _hasTxFee: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    nexus(overrides?: CallOverrides): Promise<string>;

    platformAddress(overrides?: CallOverrides): Promise<string>;

    reApproveAllTokens(overrides?: CallOverrides): Promise<void>;

    setPTokenAddress(
      _bAsset: string,
      _pToken: string,
      overrides?: CallOverrides
    ): Promise<void>;

    whitelist(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    "withdraw(address,address,uint256,bool)"(
      _receiver: string,
      _bAsset: string,
      _amount: BigNumberish,
      _hasTxFee: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    "withdraw(address,address,uint256,uint256,bool)"(
      _receiver: string,
      _bAsset: string,
      _amount: BigNumberish,
      _totalAmount: BigNumberish,
      _hasTxFee: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawRaw(
      _receiver: string,
      _bAsset: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    Deposit(
      _bAsset?: string | null,
      _pToken?: null,
      _amount?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { _bAsset: string; _pToken: string; _amount: BigNumber }
    >;

    PTokenAdded(
      _bAsset?: string | null,
      _pToken?: null
    ): TypedEventFilter<[string, string], { _bAsset: string; _pToken: string }>;

    PlatformWithdrawal(
      bAsset?: string | null,
      pToken?: null,
      totalAmount?: null,
      userAmount?: null
    ): TypedEventFilter<
      [string, string, BigNumber, BigNumber],
      {
        bAsset: string;
        pToken: string;
        totalAmount: BigNumber;
        userAmount: BigNumber;
      }
    >;

    Whitelisted(
      _address?: string | null
    ): TypedEventFilter<[string], { _address: string }>;

    Withdrawal(
      _bAsset?: string | null,
      _pToken?: null,
      _amount?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { _bAsset: string; _pToken: string; _amount: BigNumber }
    >;
  };

  estimateGas: {
    addWhitelist(
      _whitelisted: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    bAssetToPToken(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    checkBalance(
      _bAsset: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    deposit(
      _bAsset: string,
      _amount: BigNumberish,
      _hasTxFee: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    nexus(overrides?: CallOverrides): Promise<BigNumber>;

    platformAddress(overrides?: CallOverrides): Promise<BigNumber>;

    reApproveAllTokens(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setPTokenAddress(
      _bAsset: string,
      _pToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    whitelist(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "withdraw(address,address,uint256,bool)"(
      _receiver: string,
      _bAsset: string,
      _amount: BigNumberish,
      _hasTxFee: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "withdraw(address,address,uint256,uint256,bool)"(
      _receiver: string,
      _bAsset: string,
      _amount: BigNumberish,
      _totalAmount: BigNumberish,
      _hasTxFee: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawRaw(
      _receiver: string,
      _bAsset: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addWhitelist(
      _whitelisted: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    bAssetToPToken(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    checkBalance(
      _bAsset: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    deposit(
      _bAsset: string,
      _amount: BigNumberish,
      _hasTxFee: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    nexus(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    platformAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    reApproveAllTokens(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setPTokenAddress(
      _bAsset: string,
      _pToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    whitelist(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "withdraw(address,address,uint256,bool)"(
      _receiver: string,
      _bAsset: string,
      _amount: BigNumberish,
      _hasTxFee: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "withdraw(address,address,uint256,uint256,bool)"(
      _receiver: string,
      _bAsset: string,
      _amount: BigNumberish,
      _totalAmount: BigNumberish,
      _hasTxFee: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawRaw(
      _receiver: string,
      _bAsset: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
