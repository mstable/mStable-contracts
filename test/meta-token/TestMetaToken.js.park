const {balance, BN, constants, ether, expect, expectEvent, makeInterfaceId, send, should, shouldFail, time}
    = require('openzeppelin-test-helpers');

const MetaToken = artifacts.require('Systok');

contract('Testing MetaToken', (accounts) => {

    const INITIAL_SUPPLY = new BN('100000000000000000000000000');

    let [ _, governor, fundManager, other, other2 ] = accounts;

    var meta;

    beforeEach('Reset MetaToken', async function () {
        meta = await MetaToken.new({from: fundManager});
    });

    describe('Initial Allocation', function () {
        it('should allocate entire initial supply of 100 million to deployer', async function () {
            (await meta.balanceOf(fundManager)).should.be.bignumber.equal(INITIAL_SUPPLY);
        });
    });

    describe('Burning', function () {
        it('should allow deployer to burn their own MTA', async function () {
            // await meta.burn(INITIAL_SUPPLY.div(new BN('2')));
            // (await meta.balanceOf(fundManager)).should.be.bignumber.equal(INITIAL_SUPPLY.div(new BN('2')));
            // (await meta.totalSupply()).should.be.bignumber.equal(INITIAL_SUPPLY.div(new BN('2')));
        });
        it('should not allow an address with no burner role to burn MTA', async function () {
            await meta.transfer(other, '1', {from: fundManager});
            await shouldFail.reverting(meta.burn('1', {from: other}));
        });
        it('should allow deployer to grant burner role to another address', async function () {
            const {logs} = await meta.addBurner(other, {from: fundManager});
            expectEvent.inLogs(logs, 'BurnerAdded', {account: other});
        });
        it('should not allow address with no burner role to grant burner roles', async function () {
            await shouldFail.reverting(meta.addBurner(other2, {from: other}));
        });
        it('should allow deployer to allow another burner to burn deployer\'s MTA', async function () {
            await meta.approve(other, '1000000000000000000000000', {from: fundManager});
            await meta.addBurner(other, {from: fundManager});
            await meta.burnFrom(fundManager, '1000000000000000000000000', {from: other});
            (await meta.balanceOf(fundManager)).should.be.bignumber.equal(new BN('0'));
        });
    });

});
