// /* eslint-disable  */

import { time } from "@openzeppelin/test-helpers";
import * as t from "types/generated";
import { BN } from "@utils/tools";

import { StandardAccounts, SystemMachine } from "@utils/machines";
import envSetup from "@utils/env_setup";
import { fullScale } from "@utils/constants";
import { simpleToExactAmount } from "@utils/math";
import { assertBNClose } from "@utils/assertions";

const { expect } = envSetup.configure();

const StakingToken = artifacts.require("MockERC20");
const MetaToken = artifacts.require("MockERC20");
const StakingRewards = artifacts.require("StakingRewards");

const timeIncreaseTo = async (seconds) => {
    const delay = 1000 - new Date().getMilliseconds();
    await new Promise((resolve) => setTimeout(resolve, delay));
    await time.increaseTo(seconds);
};

contract("StakingRewards", (accounts) => {
    const sa = new StandardAccounts(accounts);
    let systemMachine: SystemMachine;

    const rewardsDistributor = sa.dummy4;

    let stakingToken: t.MockErc20Instance;
    let metaToken: t.MockErc20Instance;
    let stakingRewards: t.StakingRewardsInstance;

    before("Init contract", async () => {
        systemMachine = new SystemMachine(sa.all);
    });

    beforeEach(async () => {
        stakingToken = await StakingToken.new("ST4KE", "ST4", 18, sa.default, 10000);
        metaToken = await MetaToken.new("META", "MTA", 18, rewardsDistributor, 100000);
        stakingRewards = await StakingRewards.new(
            systemMachine.nexus.address,
            rewardsDistributor,
            metaToken.address,
            stakingToken.address,
        );

        await this.snx.mint(stakingRewards.address, simpleToExactAmount("1000000"));
        await stakingToken.mint(sa.default, simpleToExactAmount("1000"));
        await stakingToken.mint(sa.dummy1, simpleToExactAmount("1000"));
        await stakingToken.mint(sa.dummy2, simpleToExactAmount("1000"));
        await stakingToken.mint(sa.dummy3, simpleToExactAmount("1000"));

        await stakingToken.approve(stakingRewards.address, new BN(2).pow(new BN(255)), {
            from: sa.default,
        });
        await stakingToken.approve(stakingRewards.address, new BN(2).pow(new BN(255)), {
            from: sa.dummy1,
        });
        await stakingToken.approve(stakingRewards.address, new BN(2).pow(new BN(255)), {
            from: sa.dummy2,
        });
        await stakingToken.approve(stakingRewards.address, new BN(2).pow(new BN(255)), {
            from: sa.dummy3,
        });

        this.started = (await time.latest()).add(new BN(10));
        await timeIncreaseTo(this.started);
    });

    it("Two stakers with the same stakes wait 1 w", async () => {
        // 72000 MTA per week for 3 weeks
        await stakingRewards.notifyRewardAmount(simpleToExactAmount("216000"), {
            from: sa.default,
        });

        assertBNClose(await stakingRewards.rewardPerToken(), new BN("0"), fullScale);
        expect(await stakingRewards.earned(sa.default)).to.be.bignumber.equal("0");
        expect(await stakingRewards.earned(sa.dummy1)).to.be.bignumber.equal("0");

        await stakingRewards.stake(simpleToExactAmount("1"), { from: sa.default });
        await stakingRewards.stake(simpleToExactAmount("1"), { from: sa.dummy1 });

        assertBNClose(await stakingRewards.rewardPerToken(), new BN("0"), fullScale);
        expect(await stakingRewards.earned(sa.default)).to.be.bignumber.equal("0");
        expect(await stakingRewards.earned(sa.dummy1)).to.be.bignumber.equal("0");

        await timeIncreaseTo(this.started.add(time.duration.weeks(1)));

        assertBNClose(
            await stakingRewards.rewardPerToken(),
            new BN(simpleToExactAmount("108000")),
            fullScale,
        );
        assertBNClose(
            await stakingRewards.earned(sa.default),
            new BN(simpleToExactAmount("108000")),
            fullScale,
        );
        assertBNClose(
            await stakingRewards.earned(sa.dummy1),
            new BN(simpleToExactAmount("108000")),
            fullScale,
        );
    });

    it("Two stakers with the different (1:3) stakes wait 1 w", async () => {
        // 72000 SNX per week for 3 weeks
        await stakingRewards.notifyRewardAmount(simpleToExactAmount("216000"), {
            from: sa.default,
        });

        assertBNClose(await stakingRewards.rewardPerToken(), new BN("0"), fullScale);
        expect(await stakingRewards.balanceOf(sa.default)).to.be.bignumber.equal("0");
        expect(await stakingRewards.balanceOf(sa.dummy1)).to.be.bignumber.equal("0");
        expect(await stakingRewards.earned(sa.default)).to.be.bignumber.equal("0");
        expect(await stakingRewards.earned(sa.dummy1)).to.be.bignumber.equal("0");

        await stakingRewards.stake(simpleToExactAmount("1"), { from: sa.default });
        await stakingRewards.stake(simpleToExactAmount("3"), { from: sa.dummy1 });

        assertBNClose(await stakingRewards.rewardPerToken(), new BN("0"), fullScale);
        expect(await stakingRewards.earned(sa.default)).to.be.bignumber.equal("0");
        expect(await stakingRewards.earned(sa.dummy1)).to.be.bignumber.equal("0");

        await timeIncreaseTo(this.started.add(time.duration.weeks(1)));

        assertBNClose(
            await stakingRewards.rewardPerToken(),
            new BN(simpleToExactAmount("54000")),
            fullScale,
        );
        assertBNClose(
            await stakingRewards.earned(sa.default),
            new BN(simpleToExactAmount("54000")),
            fullScale,
        );
        assertBNClose(
            await stakingRewards.earned(sa.dummy1),
            new BN(simpleToExactAmount("162000")),
            fullScale,
        );
    });

    it("Two stakers with the different (1:3) stakes wait 2 weeks", async () => {
        //
        // 1x: +----------------+ = 72k for 1w + 18k for 2w
        // 3x:         +--------+ =  0k for 1w + 54k for 2w
        //

        // 72000 SNX per week for 3 weeks
        await stakingRewards.notifyRewardAmount(
            simpleToExactAmount("216000"),
            time.duration.weeks(3),
            {
                from: sa.default,
            },
        );

        await stakingRewards.stake(simpleToExactAmount("1"), { from: sa.default });

        await timeIncreaseTo(this.started.add(time.duration.weeks(1)));

        await stakingRewards.stake(simpleToExactAmount("3"), { from: sa.dummy1 });

        expect(await stakingRewards.rewardPerToken()).to.be.bignumber.almostEqualDiv1e18(
            simpleToExactAmount("72000"),
        );
        expect(await stakingRewards.earned(sa.default)).to.be.bignumber.almostEqualDiv1e18(
            simpleToExactAmount("72000"),
        );
        expect(await stakingRewards.earned(sa.dummy1)).to.be.bignumber.almostEqualDiv1e18(
            simpleToExactAmount("0"),
        );

        await timeIncreaseTo(this.started.add(time.duration.weeks(2)));

        expect(await stakingRewards.rewardPerToken()).to.be.bignumber.almostEqualDiv1e18(
            simpleToExactAmount("90000"),
        );
        expect(await stakingRewards.earned(sa.default)).to.be.bignumber.almostEqualDiv1e18(
            simpleToExactAmount("90000"),
        );
        expect(await stakingRewards.earned(sa.dummy1)).to.be.bignumber.almostEqualDiv1e18(
            simpleToExactAmount("54000"),
        );
    });

    it("Three stakers with the different (1:3:5) stakes wait 3 weeks", async function() {
        //
        // 1x: +----------------+--------+ = 18k for 1w +  8k for 2w + 12k for 3w
        // 3x: +----------------+          = 54k for 1w + 24k for 2w +  0k for 3w
        // 5x:         +-----------------+ =  0k for 1w + 40k for 2w + 60k for 3w
        //

        // 72000 SNX per week for 3 weeks
        await stakingRewards.notifyRewardAmount(
            simpleToExactAmount("216000"),
            time.duration.weeks(3),
            {
                from: sa.default,
            },
        );

        await stakingRewards.stake(simpleToExactAmount("1"), { from: sa.default });
        await stakingRewards.stake(simpleToExactAmount("3"), { from: sa.dummy1 });

        await timeIncreaseTo(this.started.add(time.duration.weeks(1)));

        await stakingRewards.stake(simpleToExactAmount("5"), { from: sa.dummy2 });

        expect(await stakingRewards.rewardPerToken()).to.be.bignumber.almostEqualDiv1e18(
            simpleToExactAmount("18000"),
        );
        expect(await stakingRewards.earned(sa.default)).to.be.bignumber.almostEqualDiv1e18(
            simpleToExactAmount("18000"),
        );
        expect(await stakingRewards.earned(sa.dummy1)).to.be.bignumber.almostEqualDiv1e18(
            simpleToExactAmount("54000"),
        );

        await timeIncreaseTo(this.started.add(time.duration.weeks(2)));

        expect(await stakingRewards.rewardPerToken()).to.be.bignumber.almostEqualDiv1e18(
            simpleToExactAmount("26000"),
        ); // 18k + 8k
        expect(await stakingRewards.earned(sa.default)).to.be.bignumber.almostEqualDiv1e18(
            simpleToExactAmount("26000"),
        );
        expect(await stakingRewards.earned(sa.dummy1)).to.be.bignumber.almostEqualDiv1e18(
            simpleToExactAmount("78000"),
        );
        expect(await stakingRewards.earned(sa.dummy2)).to.be.bignumber.almostEqualDiv1e18(
            simpleToExactAmount("40000"),
        );

        await stakingRewards.exit({ from: sa.dummy1 });

        await timeIncreaseTo(this.started.add(time.duration.weeks(3)));

        expect(await stakingRewards.rewardPerToken()).to.be.bignumber.almostEqualDiv1e18(
            simpleToExactAmount("38000"),
        ); // 18k + 8k + 12k
        expect(await stakingRewards.earned(sa.default)).to.be.bignumber.almostEqualDiv1e18(
            simpleToExactAmount("38000"),
        );
        expect(await stakingRewards.earned(sa.dummy1)).to.be.bignumber.almostEqualDiv1e18(
            simpleToExactAmount("0"),
        );
        expect(await stakingRewards.earned(sa.dummy2)).to.be.bignumber.almostEqualDiv1e18(
            simpleToExactAmount("100000"),
        );
    });

    it("Notify Reward Amount from mocked distribution to 10,000", async function() {
        // 10000 SNX per week for 1 weeks
        await stakingRewards.notifyRewardAmount(
            simpleToExactAmount("10000"),
            time.duration.weeks(1),
            {
                from: sa.default,
            },
        );

        expect(await stakingRewards.rewardPerToken()).to.be.bignumber.almostEqualDiv1e18("0");
        expect(await stakingRewards.balanceOf(sa.default)).to.be.bignumber.equal("0");
        expect(await stakingRewards.balanceOf(sa.dummy1)).to.be.bignumber.equal("0");
        expect(await stakingRewards.earned(sa.default)).to.be.bignumber.equal("0");
        expect(await stakingRewards.earned(sa.dummy1)).to.be.bignumber.equal("0");

        await stakingRewards.stake(simpleToExactAmount("1"), { from: sa.default });
        await stakingRewards.stake(simpleToExactAmount("3"), { from: sa.dummy1 });

        expect(await stakingRewards.rewardPerToken()).to.be.bignumber.almostEqualDiv1e18("0");
        expect(await stakingRewards.earned(sa.default)).to.be.bignumber.equal("0");
        expect(await stakingRewards.earned(sa.dummy1)).to.be.bignumber.equal("0");

        await timeIncreaseTo(this.started.add(time.duration.weeks(1)));

        expect(await stakingRewards.rewardPerToken()).to.be.bignumber.almostEqualDiv1e18(
            simpleToExactAmount("2500"),
        );
        expect(await stakingRewards.earned(sa.default)).to.be.bignumber.almostEqualDiv1e18(
            simpleToExactAmount("2500"),
        );
        expect(await stakingRewards.earned(sa.dummy1)).to.be.bignumber.almostEqualDiv1e18(
            simpleToExactAmount("7500"),
        );
    });
});
