

import { impersonate, impersonateAccount } from "@utils/fork"
import { ethers, network } from "hardhat"
import { Account } from "types"
import { deployContract } from "tasks/utils/deploy-utils"
import { AAVE, stkAAVE, DAI, mBTC, mUSD, USDC, USDT, WBTC, COMP, GUSD, BUSD, CREAM, cyMUSD, RAI } from "tasks/utils/tokens"
import {
    CompoundIntegration__factory,
    DelayedProxyAdmin,
    DelayedProxyAdmin__factory,
    ERC20,
    ERC20__factory,
    FeederPool,
    FeederPool__factory,
    IAaveIncentivesController,
    IAaveIncentivesController__factory,
    IERC20,
    IERC20__factory,
    IUniswapV3Quoter,
    IUniswapV3Quoter__factory,
    Liquidator,
    Liquidator__factory,
} from "types/generated"
import { expect } from "chai"
import { BN, simpleToExactAmount } from "@utils/math"
import { formatUnits } from "ethers/lib/utils"
import { increaseTime } from "@utils/time"
import { ONE_DAY, ONE_HOUR, ONE_MIN, ONE_WEEK, ZERO_ADDRESS } from "@utils/constants"
import { encodeUniswapPath } from "@utils/peripheral/uniswap"
import { resolveAddress } from "tasks/utils/networkAddressFactory"
import { createPool, getPoolInfo } from "@utils/peripheral/uniswap/libs/pool"
import { Signer } from "ethers"
import { SupportedChainId, Token } from "@uniswap/sdk-core"
import { FeeAmount } from "@uniswap/v3-sdk"
import { createAndInitializePoolIfNecessary, mintPosition, mintRawPosition } from "@utils/peripheral/uniswap/libs/positions"
import { NONFUNGIBLE_POSITION_MANAGER_CONTRACT_ADDRESS } from "@utils/peripheral/uniswap/libs/constants"

import INonfungiblePositionManagerABI from "./INonfungiblePositionManagerABI.json"
const mtaAddress = resolveAddress("MTA");
const treasuryAddress = resolveAddress("mStableDAO")
const ethWhaleAddress = "0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2"
const wethWhaleAddress = "0xF04a5cC80B1E94C69B48f5ee68a08CD2F09A7c3E"

// const mtaPositionAmount = simpleToExactAmount(10)
// const ethPositionAmount = simpleToExactAmount(10)
const debug = true;
const MTA_TOKEN = new Token(
    SupportedChainId.MAINNET,
    mtaAddress,
    18,
    'MTA',
    'mStable Governance'
  )
  const WETH_TOKEN = new Token(
    SupportedChainId.MAINNET,
    "0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2",
    18,
    'WETH',
    'WETH'
  )
describe("uniswap-v3-position", () => {
    let mtaWhale: Account
    let ethWhale: Signer
    let mtaToken: IERC20
    let wethToken: IERC20
    let signer: Signer

    const mintPositionConfig = {
        tokens: {
          token0:MTA_TOKEN, 
          //1000000000000000000000
          token0Amount: 0,
          token1:WETH_TOKEN,
          //33392841820671989
          token1Amount: 1700,
          poolFee:FeeAmount.LOWEST
        }
      }

    async function setup(blockNumber: number) {
        await network.provider.request({
            method: "hardhat_reset",
            params: [
                {
                    forking: {
                        jsonRpcUrl: process.env.NODE_URL,
                        blockNumber,
                    },
                },
            ],
        })
        mtaWhale = await impersonateAccount(treasuryAddress)
        // ethWhale = await impersonate(ethWhaleAddress, false)
        ethWhale = await impersonate(wethWhaleAddress)

        // Send ETH to MTA Whale
        // ethWhale.sendTransaction({to: mtaWhale.address, value: simpleToExactAmount(3000)})
        signer = mtaWhale.signer


        mtaToken = IERC20__factory.connect(resolveAddress("MTA"), mtaWhale.signer)
        wethToken = IERC20__factory.connect(WETH_TOKEN.address, ethWhale)
        await wethToken.transfer(mtaWhale.address,simpleToExactAmount(3000) )

// 
await mtaToken.approve(NONFUNGIBLE_POSITION_MANAGER_CONTRACT_ADDRESS, ethers.constants.MaxUint256)
await wethToken.connect(signer).approve(NONFUNGIBLE_POSITION_MANAGER_CONTRACT_ADDRESS, ethers.constants.MaxUint256)

    }    
    before("setup", async () => {
        await setup(16715400);
    })

    it.skip("gets current mta / eth position FeeAmount.MEDIUM", async () => {
    // 0xa96c549fa361181a94c081597171e17d27459dbb FeeAmount.MEDIUM
    // MTA / ETH   0.3%    MTA = <0.001 ETH    ETH = 56.09k MTA        
        const mintPositionMedium = {...mintPositionConfig}
        mintPositionMedium.tokens.poolFee = FeeAmount.MEDIUM
        const poolInfo = await getPoolInfo(signer,mintPositionMedium)
        logTx(debug, poolInfo);
    })
    it.skip("gets current mta / eth position FeeAmount.HIGH", async () => {
    // 0x4a2f6c02347f1a241db36833e487f36d59af8585 FeeAmount.HIGH
    // MTA / ETH   1% MTA = <0.001 ETH ETH = 34.77k MTA            
        const mintPositionHigh= {...mintPositionConfig}
        mintPositionHigh.tokens.poolFee = FeeAmount.HIGH
        const poolInfo = await getPoolInfo(signer,mintPositionHigh)
        logTx(debug, poolInfo);
    })
    it.skip("mints new current mta / eth position FeeAmount.HIGH", async () => {
            const response = await mintPosition(signer,mintPositionConfig)
            console.log(response);
            // logTx(debug, poolInfo);
        })    
    it.skip("creates new pool mta / eth position FeeAmount.LOWEST", async () => {
    // 0x4a2f6c02347f1a241db36833e487f36d59af8585 FeeAmount.HIGH
    // MTA / ETH   1% MTA = <0.001 ETH ETH = 34.77k MTA            
        const mintPositionConf= {...mintPositionConfig}
        mintPositionConf.tokens.poolFee = FeeAmount.LOWEST
        
        await createPool(signer,mintPositionConf)
        const poolInfo = await getPoolInfo(signer,mintPositionConf)
        logTx(debug, poolInfo);
    })  
    it("creates new pool mta / eth position FeeAmount.LOWEST", async () => {
        // 0x4a2f6c02347f1a241db36833e487f36d59af8585 FeeAmount.HIGH
        // MTA / ETH   1% MTA = <0.001 ETH ETH = 34.77k MTA            
            const mintPositionConf= {...mintPositionConfig}
            mintPositionConf.tokens.poolFee = FeeAmount.LOWEST
            
            await createAndInitializePoolIfNecessary(signer,mintPositionConf)
            const poolInfo = await getPoolInfo(signer,mintPositionConf)
            logTx(debug, poolInfo);
        })    
    it("mints new current mta / eth position FeeAmount.LOWEST", async () => {
        const mintPositionConf= {...mintPositionConfig}
        mintPositionConf.tokens.poolFee = FeeAmount.LOWEST
        const response = await mintRawPosition(signer,mintPositionConf)
        console.log(response);
        // logTx(debug, poolInfo);
    }) 
    it.only("multicall", async ()=>{
        await mtaToken.connect(signer).approve(NONFUNGIBLE_POSITION_MANAGER_CONTRACT_ADDRESS, ethers.constants.MaxUint256)
        await wethToken.connect(signer).approve(NONFUNGIBLE_POSITION_MANAGER_CONTRACT_ADDRESS, ethers.constants.MaxUint256)
        const positionManager = await ethers.getContractAt(INonfungiblePositionManagerABI, "0xC36442b4a4522E871399CD717aBDD847Ab11FE88");
        // const WETH = await ethers.getContractAt('IWETH', addresses.tokens.WETH);
        // // call approve for tokens before adding a new pool
        // call approveawait WETH.connect(deployer).approve(positionManager.address, ethers.utils.parseEther('0.1'), {gasPrice: 0});
        // await evilToken.connect(deployer).approve(positionManager.address, ethers.utils.parseEther('100'), {gasPrice: 0});
        let multiCallParams = [
        // first call
        "0x13ead562" + // encoded function signature ( createAndInitializePoolIfNecessary(address, address, uint24, uint160) )
        "000000000000000000000000" + mtaToken.address.toLowerCase().substring(2) + // token1 address
        "000000000000000000000000" +  wethToken.address.toLowerCase().substring(2) + // token2 address
        "0000000000000000000000000000000000000000000000000000000000000064" + // fee
        "00000000000000000000000000000000000000000142f51a49e56ee42eeff56c", // sqrtPriceX96 
        // second call
        "0x88316456" + // encoded function signature ( mint((address,address,uint24,int24,int24,uint256,uint256,uint256,uint256,address,uint256)) )
        "000000000000000000000000" + mtaToken.address.toLowerCase().substring(2) + // token1 address
        "000000000000000000000000" +  wethToken.address.toLowerCase().substring(2) + // token2 address
        "0000000000000000000000000000000000000000000000000000000000000064" + // fee
        "fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe60e8" + // tick lower 
        "fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe60ea" + // tick upper 
        "0000000000000000000000000000000000000000000000000000000000000000" + // amount 1 desired
        "000000000000000000000000000000000000000000000000025BF6196BD10000" + // amount 2 desired
        "0000000000000000000000000000000000000000000000000000000000000000" + // min amount 1 expected
        "000000000000000000000000000000000000000000000000025BF6196BD10000" + // min amount 2 expected 
        "000000000000000000000000" + (await signer.getAddress()).toLowerCase().substring(2) + // deployer address 
        "00000000000000000000000000000000000000000000000000000000"+BN.from(Math.floor(Date.now() / 1000) + 60 * 20).toHexString().substring(2) // deadline
        ];
        

        
        
        // adding a new liquidity pool through position manager
        await positionManager.connect(signer).multicall(multiCallParams);        
    })          
    
    // pero va por alrededor de 1700 ETH y 70M MTA
    // con lo cual la position seria esta: https://app.uniswap.org/#/add/0xa3BeD4E1c75D00fa6f4E5E6922DB7261B5E9AcD2/ETH/100?minPrice=0.000024282&maxPrice=0.000024285
    // Uniswap Interface
    // Swap or provide liquidity on the Uniswap Protocol
    // minPrice=0.000024282
    // maxPrice=0.000024285
    // current price = 0.00002428571429
    // Initial supply MTA= 0
    // Initial supply ETH = 1700
})

function logTx(debug: boolean, poolInfo: any) {
    if(!debug) return;

    console.log("Current Position");
    console.log(`
    poolAddress:  ${poolInfo.poolAddress}
    token0:       ${poolInfo.token0}
    token1:       ${poolInfo.token1}
    fee:          ${poolInfo.fee}
    tickSpacing:  ${poolInfo.tickSpacing}
    sqrtPriceX96: ${poolInfo.sqrtPriceX96.toString()}
    liquidity:    ${poolInfo.liquidity.toString()}
    tick:         ${poolInfo.tick}
    `);
}


// 0x13ead562000000000000000000000000a3bed4e1c75d00fa6f4e5e6922db7261b5e9acd2000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2000000000000000000000000000000000000000000000000000000000000006400000000000000000000000000000000000000000142f51a49e56ee42eeff56c
// 0x88316456000000000000000000000000a3bed4e1c75d00fa6f4e5e6922db7261b5e9acd2000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc20000000000000000000000000000000000000000000000000000000000000064fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe60e8fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe60ea0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000016345785d8a00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000016345785d8a0000000000000000000000000000af3824e8401299b25c4d59a8a035cf9312a3b4540000000000000000000000000000000000000000000000000000000063fc0953

// 000000000000000000000000a3bed4e1c75d00fa6f4e5e6922db7261b5e9acd2
// 000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2
// 0000000000000000000000000000000000000000000000000000000000000064
// fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe60e8
// fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe60ea
// 0000000000000000000000000000000000000000000000000000000000000000
// 000000000000000000000000000000000000000000000000016345785d8a0000
// 0000000000000000000000000000000000000000000000000000000000000000
// 000000000000000000000000000000000000000000000000016345785d8a0000
// 000000000000000000000000af3824e8401299b25c4d59a8a035cf9312a3b454
// 0000000000000000000000000000000000000000000000000000000063fc0953
// 0x12210e8a

// 0xac9650d8000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000030000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000000000000000000012000000000000000000000000000000000000000000000000000000000000002c0000000000000000000000000000000000000000000000000000000000000008413ead562000000000000000000000000a3bed4e1c75d00fa6f4e5e6922db7261b5e9acd2000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2000000000000000000000000000000000000000000000000000000000000006400000000000000000000000000000000000000000142f51a49e56ee42eeff56c00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000016488316456000000000000000000000000a3bed4e1c75d00fa6f4e5e6922db7261b5e9acd2000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc20000000000000000000000000000000000000000000000000000000000000064fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe60e8fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe60ea0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000016345785d8a00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000016345785d8a0000000000000000000000000000af3824e8401299b25c4d59a8a035cf9312a3b4540000000000000000000000000000000000000000000000000000000063fc095300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000412210e8a00000000000000000000000000000000000000000000000000000000

// createAndInitializePoolIfNecessary
// 0xa3BeD4E1c75D00fa6f4E5E6922DB7261B5E9AcD2
// 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2  
// 100
// 390431578644343634535642476



// "0x1749e1e3000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000120000000000000000000000000000000000000000000000000000000000000240000000000000000000000000000000000000000000000000000000000000030000000000000000000000000000000000000000000000000000000000000003c000000000000000000000000000000000000000000000000000000000000004800000000000000000000000000000000000000000000000000000000000000540000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000000000000000000006a00000000000000000000000000000000000000000000000000000000000000740000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000008a0000000000000000000000000000000000000000000000000000000000000094000000000000000000000000000000000000000000000000000000000000009e00000000000000000000000000000000000000000000000000000000000000a800000000000000000000000000000000000000000000000000000000000000b200000000000000000000000000000000000000000000000000000000000000bc00000000000000000000000000000000000000000000000000000000000000c600000000000000000000000000000000000000000000000000000000000000d000000000000000000000000000000000000000000000000000000000000000dc000000000000000000000000000000000000c2e074ec69a0dfb2997ba6c7d2e1e00000000000000000000000000000000000000000000000000000000000f4240000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000240178b8bf00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000c2e074ec69a0dfb2997ba6c7d2e1e00000000000000000000000000000000000000000000000000000000000f4240000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000240178b8bfa165447c3b2e8578a3f2cfca28c1f9533d5b10ef72032a0b62c8e9842e37f52b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000c2e074ec69a0dfb2997ba6c7d2e1e00000000000000000000000000000000000000000000000000000000000f4240000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000240178b8bfd4b63be5dc653a81f793311d472893a9fba1cf21a22bde8747ebf6af4a89cb9100000000000000000000000000000000000000000000000000000000000000000000000000000000090d4613473dee047c3f2706764f49e0821d256e00000000000000000000000000000000000000000000000000000000000f4240000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000249e34070f000000000000000000000000000000000000000000000000000000000002a88700000000000000000000000000000000000000000000000000000000000000000000000000000000122eb74f9d0f1a5ed587f43d120c1c2bbdb9360b00000000000000000000000000000000000000000000000000000000000f4240000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000243b3b57ded4b63be5dc653a81f793311d472893a9fba1cf21a22bde8747ebf6af4a89cb9100000000000000000000000000000000000000000000000000000000000000000000000000000000169e633a2d1e6c10dd91238ba11c4a708dfef37c00000000000000000000000000000000000000000000000000000000000f42400000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000000000000000000000450d25bcd000000000000000000000000000000000000000000000000000000000000000000000000000000001f98415757620b543a52e61c46b32eb19261f98400000000000000000000000000000000000000000000000000000000000f4240000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000040f28c97d000000000000000000000000000000000000000000000000000000000000000000000000000000001f98415757620b543a52e61c46b32eb19261f98400000000000000000000000000000000000000000000000000000000000f4240000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000244d2301cc000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2000000000000000000000000000000000000000000000000000000000000000000000000000000004a2f6c02347f1a241db36833e487f36d59af858500000000000000000000000000000000000000000000000000000000000f4240000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000041a686502000000000000000000000000000000000000000000000000000000000000000000000000000000004a2f6c02347f1a241db36833e487f36d59af858500000000000000000000000000000000000000000000000000000000000f4240000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000043850c7bd0000000000000000000000000000000000000000000000000000000000000000000000000000000050e616ffc2372748fe1ddcb3cf301d080b9b0c1f00000000000000000000000000000000000000000000000000000000000f4240000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000041a6865020000000000000000000000000000000000000000000000000000000000000000000000000000000050e616ffc2372748fe1ddcb3cf301d080b9b0c1f00000000000000000000000000000000000000000000000000000000000f4240000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000043850c7bd00000000000000000000000000000000000000000000000000000000000000000000000000000000a5cac163be3695c69129d16dc87001a2b7cfbfcc00000000000000000000000000000000000000000000000000000000000f4240000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000041a68650200000000000000000000000000000000000000000000000000000000000000000000000000000000a5cac163be3695c69129d16dc87001a2b7cfbfcc00000000000000000000000000000000000000000000000000000000000f4240000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000043850c7bd00000000000000000000000000000000000000000000000000000000000000000000000000000000a96c549fa361181a94c081597171e17d27459dbb00000000000000000000000000000000000000000000000000000000000f4240000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000041a68650200000000000000000000000000000000000000000000000000000000000000000000000000000000a96c549fa361181a94c081597171e17d27459dbb00000000000000000000000000000000000000000000000000000000000f4240000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000043850c7bd0000000000000000000000000000000000000000000000000000000000000000000000000000000065770b5283117639760bea3f867b69b3697a91dd000000000000000000000000000000000000000000000000000000000002d2a80000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000000000000000000002470a08231000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc200000000000000000000000000000000000000000000000000000000000000000000000000000000a3bed4e1c75d00fa6f4e5e6922db7261b5e9acd2000000000000000000000000000000000000000000000000000000000002d2a80000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000000000000000000002470a08231000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc200000000000000000000000000000000000000000000000000000000"
